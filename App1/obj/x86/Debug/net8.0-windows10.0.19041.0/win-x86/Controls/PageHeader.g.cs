#pragma checksum "D:\Microsoft Visual Studio\Source\Repos\App1\App1\Controls\PageHeader.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "CA7ED61AEAC2ABBA146D06820FE89568E47DD5509388A16043DD6F66DF230FAA"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App1.Controls
{
    partial class PageHeader : 
        global::Microsoft.UI.Xaml.Controls.UserControl, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(global::Microsoft.UI.Xaml.Controls.TeachingTip obj, global::Microsoft.UI.Xaml.FrameworkElement value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.FrameworkElement) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.FrameworkElement), targetNullValue);
                }
                obj.Target = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(global::Microsoft.UI.Xaml.DependencyObject obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                global::Microsoft.UI.Xaml.Controls.ToolTipService.SetToolTip(obj, value);
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PageHeader_obj20_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IPageHeader_Bindings
        {
            private global::App1.Data.ControlInfoDocLink dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj20;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj21;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj21TextDisabled = false;

            public PageHeader_obj20_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 70 && columnNumber == 56)
                {
                    isobj21TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 20: // Controls\PageHeader.xaml line 69
                        this.obj20 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target));
                        break;
                    case 21: // Controls\PageHeader.xaml line 70
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            var rootElement = (this.obj20.Target as global::Microsoft.UI.Xaml.Controls.HyperlinkButton);
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::App1.Data.ControlInfoDocLink>(item), 1 << phase);
            }

            public void Recycle()
            {
            }

            // IPageHeader_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::App1.Data.ControlInfoDocLink>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::App1.Data.ControlInfoDocLink obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                    }
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\PageHeader.xaml line 70
                    if (!isobj21TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj21, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PageHeader_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IPageHeader_Bindings
        {
            private global::App1.Controls.PageHeader dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Microsoft.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.Button obj6;
            private global::Microsoft.UI.Xaml.Controls.AppBarSeparator obj7;
            private global::Microsoft.UI.Xaml.Controls.TeachingTip obj10;
            private global::Microsoft.UI.Xaml.Controls.DropDownButton obj11;
            private global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj14;
            private global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj15;
            private global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj16;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj17;
            private global::Microsoft.UI.Xaml.Controls.ItemsControl obj18;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4TextDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj6VisibilityDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj10TargetDisabled = false;
            private static bool isobj11VisibilityDisabled = false;
            private static bool isobj14ToolTipDisabled = false;
            private static bool isobj15ToolTipDisabled = false;
            private static bool isobj16ToolTipDisabled = false;
            private static bool isobj17TextDisabled = false;
            private static bool isobj18ItemsSourceDisabled = false;

            private PageHeader_obj1_BindingsTracking bindingsTracking;

            public PageHeader_obj1_Bindings()
            {
                this.bindingsTracking = new PageHeader_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 31 && columnNumber == 13)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 41 && columnNumber == 13)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 13)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 159 && columnNumber == 21)
                {
                    isobj6VisibilityDisabled = true;
                }
                else if (lineNumber == 164 && columnNumber == 34)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 184 && columnNumber == 29)
                {
                    isobj10TargetDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 21)
                {
                    isobj11VisibilityDisabled = true;
                }
                else if (lineNumber == 137 && columnNumber == 37)
                {
                    isobj14ToolTipDisabled = true;
                }
                else if (lineNumber == 143 && columnNumber == 37)
                {
                    isobj15ToolTipDisabled = true;
                }
                else if (lineNumber == 116 && columnNumber == 41)
                {
                    isobj16ToolTipDisabled = true;
                }
                else if (lineNumber == 117 && columnNumber == 52)
                {
                    isobj17TextDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 33)
                {
                    isobj18ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // Controls\PageHeader.xaml line 28
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 5: // Controls\PageHeader.xaml line 34
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 6: // Controls\PageHeader.xaml line 152
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 7: // Controls\PageHeader.xaml line 164
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AppBarSeparator>(target);
                        break;
                    case 10: // Controls\PageHeader.xaml line 175
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                        break;
                    case 11: // Controls\PageHeader.xaml line 45
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.DropDownButton>(target);
                        break;
                    case 14: // Controls\PageHeader.xaml line 134
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                        break;
                    case 15: // Controls\PageHeader.xaml line 140
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                        break;
                    case 16: // Controls\PageHeader.xaml line 113
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                        break;
                    case 17: // Controls\PageHeader.xaml line 117
                        this.obj17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 18: // Controls\PageHeader.xaml line 57
                        this.obj18 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ItemsControl>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IPageHeader_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::App1.Controls.PageHeader>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Microsoft.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Microsoft.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Microsoft.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Microsoft.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Microsoft.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::App1.Controls.PageHeader obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Item(obj.Item, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ThemeButtonVisibility(obj.ThemeButtonVisibility, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_CopyLinkButton(obj.CopyLinkButton, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PageMarkupGitHubLink(obj.PageMarkupGitHubLink, phase);
                        this.Update_PageCodeGitHubLink(obj.PageCodeGitHubLink, phase);
                        this.Update_ControlSourceLink(obj.ControlSourceLink, phase);
                    }
                }
            }
            private void Update_Item(global::App1.Data.ControlInfoDataItem obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Item_Title(obj.Title, phase);
                        this.Update_Item_ApiNamespace(obj.ApiNamespace, phase);
                        this.Update_Item_Docs(obj.Docs, phase);
                    }
                }
            }
            private void Update_Item_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\PageHeader.xaml line 28
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                    // Controls\PageHeader.xaml line 117
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                    }
                }
            }
            private void Update_Item_ApiNamespace(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\PageHeader.xaml line 34
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                    // Controls\PageHeader.xaml line 34
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj5, (global::Microsoft.UI.Xaml.Visibility)this.LookupConverter("emptyStringToVisibilityConverter").Convert(obj, typeof(global::Microsoft.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ThemeButtonVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\PageHeader.xaml line 152
                    if (!isobj6VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj6, obj);
                    }
                    // Controls\PageHeader.xaml line 164
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                }
            }
            private void Update_CopyLinkButton(global::App1.Controls.CopyButton obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\PageHeader.xaml line 175
                    if (!isobj10TargetDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(this.obj10, obj, null);
                    }
                }
            }
            private void Update_Item_Docs(global::System.Collections.ObjectModel.ObservableCollection<global::App1.Data.ControlInfoDocLink> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\PageHeader.xaml line 45
                    if (!isobj11VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj11, (global::Microsoft.UI.Xaml.Visibility)this.LookupConverter("collectionConverter").Convert(obj, typeof(global::Microsoft.UI.Xaml.Visibility), null, null));
                    }
                    // Controls\PageHeader.xaml line 57
                    if (!isobj18ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj18, obj, null);
                    }
                }
            }
            private void Update_PageMarkupGitHubLink(global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PageMarkupGitHubLink(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PageMarkupGitHubLink_NavigateUri(obj.NavigateUri, phase);
                    }
                }
            }
            private void Update_PageMarkupGitHubLink_NavigateUri(global::System.Uri obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\PageHeader.xaml line 134
                    if (!isobj14ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj14, obj, null);
                    }
                }
            }
            private void Update_PageCodeGitHubLink(global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PageCodeGitHubLink(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PageCodeGitHubLink_NavigateUri(obj.NavigateUri, phase);
                    }
                }
            }
            private void Update_PageCodeGitHubLink_NavigateUri(global::System.Uri obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\PageHeader.xaml line 140
                    if (!isobj15ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ControlSourceLink(global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ControlSourceLink(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ControlSourceLink_NavigateUri(obj.NavigateUri, phase);
                    }
                }
            }
            private void Update_ControlSourceLink_NavigateUri(global::System.Uri obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\PageHeader.xaml line 113
                    if (!isobj16ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj16, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class PageHeader_obj1_BindingsTracking
            {
                private global::System.WeakReference<PageHeader_obj1_Bindings> weakRefToBindingObj; 

                public PageHeader_obj1_BindingsTracking(PageHeader_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<PageHeader_obj1_Bindings>(obj);
                }

                public PageHeader_obj1_Bindings TryGetBindingObject()
                {
                    PageHeader_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_PageMarkupGitHubLink(null);
                    UpdateChildListeners_PageCodeGitHubLink(null);
                    UpdateChildListeners_ControlSourceLink(null);
                }

                public void DependencyPropertyChanged_ThemeButtonVisibility(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    PageHeader_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::App1.Controls.PageHeader obj = sender as global::App1.Controls.PageHeader;
                        if (obj != null)
                        {
                            bindings.Update_ThemeButtonVisibility(obj.ThemeButtonVisibility, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_ThemeButtonVisibility = 0;
                public void UpdateChildListeners_(global::App1.Controls.PageHeader obj)
                {
                    PageHeader_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::App1.Controls.PageHeader.ThemeButtonVisibilityProperty, tokenDPC_ThemeButtonVisibility);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_ThemeButtonVisibility = obj.RegisterPropertyChangedCallback(global::App1.Controls.PageHeader.ThemeButtonVisibilityProperty, DependencyPropertyChanged_ThemeButtonVisibility);
                        }
                    }
                }
                public void DependencyPropertyChanged_PageMarkupGitHubLink_NavigateUri(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    PageHeader_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj = sender as global::Microsoft.UI.Xaml.Controls.HyperlinkButton;
                        if (obj != null)
                        {
                            bindings.Update_PageMarkupGitHubLink_NavigateUri(obj.NavigateUri, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.HyperlinkButton cache_PageMarkupGitHubLink = null;
                private long tokenDPC_PageMarkupGitHubLink_NavigateUri = 0;
                public void UpdateChildListeners_PageMarkupGitHubLink(global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj)
                {
                    if (obj != cache_PageMarkupGitHubLink)
                    {
                        if (cache_PageMarkupGitHubLink != null)
                        {
                            cache_PageMarkupGitHubLink.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty, tokenDPC_PageMarkupGitHubLink_NavigateUri);
                            cache_PageMarkupGitHubLink = null;
                        }
                        if (obj != null)
                        {
                            cache_PageMarkupGitHubLink = obj;
                            tokenDPC_PageMarkupGitHubLink_NavigateUri = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty, DependencyPropertyChanged_PageMarkupGitHubLink_NavigateUri);
                        }
                    }
                }
                public void DependencyPropertyChanged_PageCodeGitHubLink_NavigateUri(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    PageHeader_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj = sender as global::Microsoft.UI.Xaml.Controls.HyperlinkButton;
                        if (obj != null)
                        {
                            bindings.Update_PageCodeGitHubLink_NavigateUri(obj.NavigateUri, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.HyperlinkButton cache_PageCodeGitHubLink = null;
                private long tokenDPC_PageCodeGitHubLink_NavigateUri = 0;
                public void UpdateChildListeners_PageCodeGitHubLink(global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj)
                {
                    if (obj != cache_PageCodeGitHubLink)
                    {
                        if (cache_PageCodeGitHubLink != null)
                        {
                            cache_PageCodeGitHubLink.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty, tokenDPC_PageCodeGitHubLink_NavigateUri);
                            cache_PageCodeGitHubLink = null;
                        }
                        if (obj != null)
                        {
                            cache_PageCodeGitHubLink = obj;
                            tokenDPC_PageCodeGitHubLink_NavigateUri = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty, DependencyPropertyChanged_PageCodeGitHubLink_NavigateUri);
                        }
                    }
                }
                public void DependencyPropertyChanged_ControlSourceLink_NavigateUri(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    PageHeader_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj = sender as global::Microsoft.UI.Xaml.Controls.HyperlinkButton;
                        if (obj != null)
                        {
                            bindings.Update_ControlSourceLink_NavigateUri(obj.NavigateUri, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.HyperlinkButton cache_ControlSourceLink = null;
                private long tokenDPC_ControlSourceLink_NavigateUri = 0;
                public void UpdateChildListeners_ControlSourceLink(global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj)
                {
                    if (obj != cache_ControlSourceLink)
                    {
                        if (cache_ControlSourceLink != null)
                        {
                            cache_ControlSourceLink.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty, tokenDPC_ControlSourceLink_NavigateUri);
                            cache_ControlSourceLink = null;
                        }
                        if (obj != null)
                        {
                            cache_ControlSourceLink = obj;
                            tokenDPC_ControlSourceLink_NavigateUri = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty, DependencyPropertyChanged_ControlSourceLink_NavigateUri);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Controls\PageHeader.xaml line 16
                {
                    this.collectionConverter = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Converters.CollectionVisibilityConverter>(target);
                }
                break;
            case 3: // Controls\PageHeader.xaml line 21
                {
                    this.headerGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 5: // Controls\PageHeader.xaml line 34
                {
                    this.NamespaceTextBlock = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 6: // Controls\PageHeader.xaml line 152
                {
                    this.ThemeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ThemeButton).Click += this.OnThemeButtonClick;
                }
                break;
            case 8: // Controls\PageHeader.xaml line 165
                {
                    this.CopyLinkButton = global::WinRT.CastExtensions.As<global::App1.Controls.CopyButton>(target);
                    ((global::App1.Controls.CopyButton)this.CopyLinkButton).Click += this.OnCopyLinkButtonClick;
                }
                break;
            case 9: // Controls\PageHeader.xaml line 191
                {
                    this.FeedbackBtn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.FeedbackBtn).Click += this.OnFeedBackButtonClick;
                }
                break;
            case 10: // Controls\PageHeader.xaml line 175
                {
                    this.CopyLinkButtonTeachingTip = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.CopyLinkButtonTeachingTip).ActionButtonClick += this.OnCopyDontShowAgainButtonClick;
                }
                break;
            case 12: // Controls\PageHeader.xaml line 98
                {
                    this.SourcePanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 13: // Controls\PageHeader.xaml line 99
                {
                    this.ControlSourcePanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 14: // Controls\PageHeader.xaml line 134
                {
                    this.PageMarkupGitHubLink = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                }
                break;
            case 15: // Controls\PageHeader.xaml line 140
                {
                    this.PageCodeGitHubLink = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                }
                break;
            case 16: // Controls\PageHeader.xaml line 113
                {
                    this.ControlSourceLink = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                }
                break;
            case 18: // Controls\PageHeader.xaml line 57
                {
                    this.DocsList = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ItemsControl>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Controls\PageHeader.xaml line 4
                {                    
                    global::Microsoft.UI.Xaml.Controls.UserControl element1 = (global::Microsoft.UI.Xaml.Controls.UserControl)target;
                    PageHeader_obj1_Bindings bindings = new PageHeader_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 20: // Controls\PageHeader.xaml line 69
                {                    
                    global::Microsoft.UI.Xaml.Controls.HyperlinkButton element20 = (global::Microsoft.UI.Xaml.Controls.HyperlinkButton)target;
                    PageHeader_obj20_Bindings bindings = new PageHeader_obj20_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element20.DataContext);
                    element20.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element20, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element20, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

