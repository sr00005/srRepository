//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace App1
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        private global::App1.App1_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::App1.App1_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::App1.App1_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace App1.App1_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::App1.App1_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::App1.App1_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[126];
            _typeNameTable[0] = "App1.ItemTemplates";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[4] = "Boolean";
            _typeNameTable[5] = "App1.Common.NullableBooleanToBooleanConverter";
            _typeNameTable[6] = "App1.Common.NullToVisibilityConverter";
            _typeNameTable[7] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[8] = "App1.Common.EmptyStringToVisibilityConverter";
            _typeNameTable[9] = "App1.Common.BooleanToValueConverter";
            _typeNameTable[10] = "App1.Common.DoubleToThicknessConverter";
            _typeNameTable[11] = "App1.ItemsPageBase";
            _typeNameTable[12] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[13] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[14] = "System.Collections.Generic.IEnumerable`1<App1.Data.ControlInfoDataItem>";
            _typeNameTable[15] = "App1.Controls.HomePageHeaderImage";
            _typeNameTable[16] = "App1.AllControlsPage";
            _typeNameTable[17] = "CommunityToolkit.WinUI.Animations.ImplicitAnimationSet";
            _typeNameTable[18] = "Microsoft.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[19] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[20] = "CommunityToolkit.WinUI.Animations.OffsetAnimation";
            _typeNameTable[21] = "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>";
            _typeNameTable[22] = "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>";
            _typeNameTable[23] = "CommunityToolkit.WinUI.Animations.Animation";
            _typeNameTable[24] = "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>>";
            _typeNameTable[25] = "CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>";
            _typeNameTable[26] = "System.Nullable`1<Microsoft.UI.Xaml.Media.Animation.EasingMode>";
            _typeNameTable[27] = "System.ValueType";
            _typeNameTable[28] = "Microsoft.UI.Xaml.Media.Animation.EasingMode";
            _typeNameTable[29] = "String";
            _typeNameTable[30] = "System.Nullable`1<TimeSpan>";
            _typeNameTable[31] = "TimeSpan";
            _typeNameTable[32] = "System.Nullable`1<CommunityToolkit.WinUI.Animations.EasingType>";
            _typeNameTable[33] = "CommunityToolkit.WinUI.Animations.EasingType";
            _typeNameTable[34] = "System.Enum";
            _typeNameTable[35] = "CommunityToolkit.WinUI.Animations.RepeatOption";
            _typeNameTable[36] = "Microsoft.UI.Composition.AnimationDelayBehavior";
            _typeNameTable[37] = "CommunityToolkit.WinUI.Animations.OpacityAnimation";
            _typeNameTable[38] = "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>";
            _typeNameTable[39] = "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>";
            _typeNameTable[40] = "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>>";
            _typeNameTable[41] = "CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>";
            _typeNameTable[42] = "System.Nullable`1<Double>";
            _typeNameTable[43] = "Double";
            _typeNameTable[44] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[45] = "App1.Controls.SampleThemeListener";
            _typeNameTable[46] = "Microsoft.UI.Xaml.Controls.Expander";
            _typeNameTable[47] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[48] = "Microsoft.UI.Xaml.Controls.ExpandDirection";
            _typeNameTable[49] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[50] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[51] = "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings";
            _typeNameTable[52] = "Microsoft.UI.Xaml.Controls.SelectorBar";
            _typeNameTable[53] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[54] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.SelectorBarItem>";
            _typeNameTable[55] = "Microsoft.UI.Xaml.Controls.SelectorBarItem";
            _typeNameTable[56] = "Microsoft.UI.Xaml.Controls.ItemContainer";
            _typeNameTable[57] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[59] = "App1.Controls.SampleCodePresenter";
            _typeNameTable[60] = "App1.Controls.SampleCodePresenterType";
            _typeNameTable[61] = "System.Collections.Generic.IList`1<App1.ControlExampleSubstitution>";
            _typeNameTable[62] = "App1.ControlExampleSubstitution";
            _typeNameTable[63] = "CommunityToolkit.WinUI.Animations.Implicit";
            _typeNameTable[64] = "App1.ControlExample";
            _typeNameTable[65] = "Microsoft.UI.Xaml.GridLength";
            _typeNameTable[66] = "Int32";
            _typeNameTable[67] = "Microsoft.UI.Xaml.HorizontalAlignment";
            _typeNameTable[68] = "App1.Controls.CopyButton";
            _typeNameTable[69] = "Microsoft.UI.Xaml.Controls.Button";
            _typeNameTable[70] = "Microsoft.UI.Xaml.Controls.AnimatedIcon";
            _typeNameTable[71] = "Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2";
            _typeNameTable[72] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[73] = "App1.Controls.HeaderTile";
            _typeNameTable[74] = "CommunityToolkit.WinUI.VisualExtensions";
            _typeNameTable[75] = "CommunityToolkit.WinUI.Converters.CollectionVisibilityConverter";
            _typeNameTable[76] = "CommunityToolkit.WinUI.Converters.EmptyCollectionToObjectConverter";
            _typeNameTable[77] = "CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter";
            _typeNameTable[78] = "Microsoft.UI.Xaml.Controls.TeachingTip";
            _typeNameTable[79] = "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode";
            _typeNameTable[80] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[81] = "System.Windows.Input.ICommand";
            _typeNameTable[82] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[83] = "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode";
            _typeNameTable[84] = "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility";
            _typeNameTable[85] = "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings";
            _typeNameTable[86] = "Microsoft.UI.Xaml.Controls.DropDownButton";
            _typeNameTable[87] = "App1.Controls.PageHeader";
            _typeNameTable[88] = "System.Action";
            _typeNameTable[89] = "System.MulticastDelegate";
            _typeNameTable[90] = "System.Delegate";
            _typeNameTable[91] = "App1.Data.ControlInfoDataItem";
            _typeNameTable[92] = "App1.Controls.TileGallery";
            _typeNameTable[93] = "App1.HomePage";
            _typeNameTable[94] = "CommunityToolkit.WinUI.Converters.StringVisibilityConverter";
            _typeNameTable[95] = "CommunityToolkit.WinUI.Converters.EmptyStringToObjectConverter";
            _typeNameTable[96] = "App1.ItemPage";
            _typeNameTable[97] = "Microsoft.UI.Xaml.Controls.InfoBadge";
            _typeNameTable[98] = "Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings";
            _typeNameTable[99] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[100] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[101] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[102] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[103] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[104] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[105] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[106] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[107] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[108] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[109] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[110] = "Microsoft.UI.Xaml.CornerRadius";
            _typeNameTable[111] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[112] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[113] = "Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator";
            _typeNameTable[114] = "App1.MainTest";
            _typeNameTable[115] = "App1.MainTest.DeviceType";
            _typeNameTable[116] = "App1.MainWindow";
            _typeNameTable[117] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[118] = "App1.SectionPage";
            _typeNameTable[119] = "CommunityToolkit.WinUI.Controls.SettingsCard";
            _typeNameTable[120] = "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase";
            _typeNameTable[121] = "CommunityToolkit.WinUI.Controls.ContentAlignment";
            _typeNameTable[122] = "CommunityToolkit.WinUI.Controls.SettingsExpander";
            _typeNameTable[123] = "App1.SettingsPage";
            _typeNameTable[124] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[125] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[126];
            _typeTable[0] = typeof(global::App1.ItemTemplates);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[4] = typeof(global::System.Boolean);
            _typeTable[5] = typeof(global::App1.Common.NullableBooleanToBooleanConverter);
            _typeTable[6] = typeof(global::App1.Common.NullToVisibilityConverter);
            _typeTable[7] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[8] = typeof(global::App1.Common.EmptyStringToVisibilityConverter);
            _typeTable[9] = typeof(global::App1.Common.BooleanToValueConverter);
            _typeTable[10] = typeof(global::App1.Common.DoubleToThicknessConverter);
            _typeTable[11] = typeof(global::App1.ItemsPageBase);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[13] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[14] = typeof(global::System.Collections.Generic.IEnumerable<global::App1.Data.ControlInfoDataItem>);
            _typeTable[15] = typeof(global::App1.Controls.HomePageHeaderImage);
            _typeTable[16] = typeof(global::App1.AllControlsPage);
            _typeTable[17] = typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet);
            _typeTable[18] = typeof(global::Microsoft.UI.Xaml.DependencyObjectCollection);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[20] = typeof(global::CommunityToolkit.WinUI.Animations.OffsetAnimation);
            _typeTable[21] = typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>);
            _typeTable[22] = typeof(global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>);
            _typeTable[23] = typeof(global::CommunityToolkit.WinUI.Animations.Animation);
            _typeTable[24] = typeof(global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>);
            _typeTable[25] = typeof(global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>);
            _typeTable[26] = typeof(global::System.Nullable<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>);
            _typeTable[27] = typeof(global::System.ValueType);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.Media.Animation.EasingMode);
            _typeTable[29] = typeof(global::System.String);
            _typeTable[30] = typeof(global::System.Nullable<global::System.TimeSpan>);
            _typeTable[31] = typeof(global::System.TimeSpan);
            _typeTable[32] = typeof(global::System.Nullable<global::CommunityToolkit.WinUI.Animations.EasingType>);
            _typeTable[33] = typeof(global::CommunityToolkit.WinUI.Animations.EasingType);
            _typeTable[34] = typeof(global::System.Enum);
            _typeTable[35] = typeof(global::CommunityToolkit.WinUI.Animations.RepeatOption);
            _typeTable[36] = typeof(global::Microsoft.UI.Composition.AnimationDelayBehavior);
            _typeTable[37] = typeof(global::CommunityToolkit.WinUI.Animations.OpacityAnimation);
            _typeTable[38] = typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>);
            _typeTable[39] = typeof(global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>);
            _typeTable[40] = typeof(global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>);
            _typeTable[41] = typeof(global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>);
            _typeTable[42] = typeof(global::System.Nullable<global::System.Double>);
            _typeTable[43] = typeof(global::System.Double);
            _typeTable[44] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[45] = typeof(global::App1.Controls.SampleThemeListener);
            _typeTable[46] = typeof(global::Microsoft.UI.Xaml.Controls.Expander);
            _typeTable[47] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[48] = typeof(global::Microsoft.UI.Xaml.Controls.ExpandDirection);
            _typeTable[49] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[51] = typeof(global::Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings);
            _typeTable[52] = typeof(global::Microsoft.UI.Xaml.Controls.SelectorBar);
            _typeTable[53] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[54] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.SelectorBarItem>);
            _typeTable[55] = typeof(global::Microsoft.UI.Xaml.Controls.SelectorBarItem);
            _typeTable[56] = typeof(global::Microsoft.UI.Xaml.Controls.ItemContainer);
            _typeTable[57] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[59] = typeof(global::App1.Controls.SampleCodePresenter);
            _typeTable[60] = typeof(global::App1.Controls.SampleCodePresenterType);
            _typeTable[61] = typeof(global::System.Collections.Generic.IList<global::App1.ControlExampleSubstitution>);
            _typeTable[62] = typeof(global::App1.ControlExampleSubstitution);
            _typeTable[63] = typeof(global::CommunityToolkit.WinUI.Animations.Implicit);
            _typeTable[64] = typeof(global::App1.ControlExample);
            _typeTable[65] = typeof(global::Microsoft.UI.Xaml.GridLength);
            _typeTable[66] = typeof(global::System.Int32);
            _typeTable[67] = typeof(global::Microsoft.UI.Xaml.HorizontalAlignment);
            _typeTable[68] = typeof(global::App1.Controls.CopyButton);
            _typeTable[69] = typeof(global::Microsoft.UI.Xaml.Controls.Button);
            _typeTable[70] = typeof(global::Microsoft.UI.Xaml.Controls.AnimatedIcon);
            _typeTable[71] = typeof(global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2);
            _typeTable[72] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[73] = typeof(global::App1.Controls.HeaderTile);
            _typeTable[74] = typeof(global::CommunityToolkit.WinUI.VisualExtensions);
            _typeTable[75] = typeof(global::CommunityToolkit.WinUI.Converters.CollectionVisibilityConverter);
            _typeTable[76] = typeof(global::CommunityToolkit.WinUI.Converters.EmptyCollectionToObjectConverter);
            _typeTable[77] = typeof(global::CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter);
            _typeTable[78] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTip);
            _typeTable[79] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode);
            _typeTable[80] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[81] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[82] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[83] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode);
            _typeTable[84] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility);
            _typeTable[85] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings);
            _typeTable[86] = typeof(global::Microsoft.UI.Xaml.Controls.DropDownButton);
            _typeTable[87] = typeof(global::App1.Controls.PageHeader);
            _typeTable[88] = typeof(global::System.Action);
            _typeTable[89] = typeof(global::System.MulticastDelegate);
            _typeTable[90] = typeof(global::System.Delegate);
            _typeTable[91] = typeof(global::App1.Data.ControlInfoDataItem);
            _typeTable[92] = typeof(global::App1.Controls.TileGallery);
            _typeTable[93] = typeof(global::App1.HomePage);
            _typeTable[94] = typeof(global::CommunityToolkit.WinUI.Converters.StringVisibilityConverter);
            _typeTable[95] = typeof(global::CommunityToolkit.WinUI.Converters.EmptyStringToObjectConverter);
            _typeTable[96] = typeof(global::App1.ItemPage);
            _typeTable[97] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadge);
            _typeTable[98] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings);
            _typeTable[99] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[100] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[101] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[102] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[103] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[104] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[105] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[106] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[107] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[108] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[109] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[110] = typeof(global::Microsoft.UI.Xaml.CornerRadius);
            _typeTable[111] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[112] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[113] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator);
            _typeTable[114] = typeof(global::App1.MainTest);
            _typeTable[115] = typeof(global::App1.MainTest.DeviceType);
            _typeTable[116] = typeof(global::App1.MainWindow);
            _typeTable[117] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[118] = typeof(global::App1.SectionPage);
            _typeTable[119] = typeof(global::CommunityToolkit.WinUI.Controls.SettingsCard);
            _typeTable[120] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase);
            _typeTable[121] = typeof(global::CommunityToolkit.WinUI.Controls.ContentAlignment);
            _typeTable[122] = typeof(global::CommunityToolkit.WinUI.Controls.SettingsExpander);
            _typeTable[123] = typeof(global::App1.SettingsPage);
            _typeTable[124] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[125] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ItemTemplates() { return new global::App1.ItemTemplates(); }
        private object Activate_3_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_5_NullableBooleanToBooleanConverter() { return new global::App1.Common.NullableBooleanToBooleanConverter(); }
        private object Activate_6_NullToVisibilityConverter() { return new global::App1.Common.NullToVisibilityConverter(); }
        private object Activate_8_EmptyStringToVisibilityConverter() { return new global::App1.Common.EmptyStringToVisibilityConverter(); }
        private object Activate_9_BooleanToValueConverter() { return new global::App1.Common.BooleanToValueConverter(); }
        private object Activate_10_DoubleToThicknessConverter() { return new global::App1.Common.DoubleToThicknessConverter(); }
        private object Activate_15_HomePageHeaderImage() { return new global::App1.Controls.HomePageHeaderImage(); }
        private object Activate_16_AllControlsPage() { return new global::App1.AllControlsPage(); }
        private object Activate_17_ImplicitAnimationSet() { return new global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet(); }
        private object Activate_20_OffsetAnimation() { return new global::CommunityToolkit.WinUI.Animations.OffsetAnimation(); }
        private object Activate_37_OpacityAnimation() { return new global::CommunityToolkit.WinUI.Animations.OpacityAnimation(); }
        private object Activate_45_SampleThemeListener() { return new global::App1.Controls.SampleThemeListener(); }
        private object Activate_46_Expander() { return new global::Microsoft.UI.Xaml.Controls.Expander(); }
        private object Activate_52_SelectorBar() { return new global::Microsoft.UI.Xaml.Controls.SelectorBar(); }
        private object Activate_55_SelectorBarItem() { return new global::Microsoft.UI.Xaml.Controls.SelectorBarItem(); }
        private object Activate_56_ItemContainer() { return new global::Microsoft.UI.Xaml.Controls.ItemContainer(); }
        private object Activate_59_SampleCodePresenter() { return new global::App1.Controls.SampleCodePresenter(); }
        private object Activate_62_ControlExampleSubstitution() { return new global::App1.ControlExampleSubstitution(); }
        private object Activate_64_ControlExample() { return new global::App1.ControlExample(); }
        private object Activate_68_CopyButton() { return new global::App1.Controls.CopyButton(); }
        private object Activate_70_AnimatedIcon() { return new global::Microsoft.UI.Xaml.Controls.AnimatedIcon(); }
        private object Activate_73_HeaderTile() { return new global::App1.Controls.HeaderTile(); }
        private object Activate_75_CollectionVisibilityConverter() { return new global::CommunityToolkit.WinUI.Converters.CollectionVisibilityConverter(); }
        private object Activate_76_EmptyCollectionToObjectConverter() { return new global::CommunityToolkit.WinUI.Converters.EmptyCollectionToObjectConverter(); }
        private object Activate_77_EmptyObjectToObjectConverter() { return new global::CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter(); }
        private object Activate_78_TeachingTip() { return new global::Microsoft.UI.Xaml.Controls.TeachingTip(); }
        private object Activate_85_TeachingTipTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings(); }
        private object Activate_86_DropDownButton() { return new global::Microsoft.UI.Xaml.Controls.DropDownButton(); }
        private object Activate_87_PageHeader() { return new global::App1.Controls.PageHeader(); }
        private object Activate_91_ControlInfoDataItem() { return new global::App1.Data.ControlInfoDataItem(); }
        private object Activate_92_TileGallery() { return new global::App1.Controls.TileGallery(); }
        private object Activate_93_HomePage() { return new global::App1.HomePage(); }
        private object Activate_94_StringVisibilityConverter() { return new global::CommunityToolkit.WinUI.Converters.StringVisibilityConverter(); }
        private object Activate_95_EmptyStringToObjectConverter() { return new global::CommunityToolkit.WinUI.Converters.EmptyStringToObjectConverter(); }
        private object Activate_96_ItemPage() { return new global::App1.ItemPage(); }
        private object Activate_97_InfoBadge() { return new global::Microsoft.UI.Xaml.Controls.InfoBadge(); }
        private object Activate_98_InfoBadgeTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings(); }
        private object Activate_99_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_109_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_111_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_113_NavigationViewItemSeparator() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator(); }
        private object Activate_114_MainTest() { return new global::App1.MainTest(); }
        private object Activate_116_MainWindow() { return new global::App1.MainWindow(); }
        private object Activate_118_SectionPage() { return new global::App1.SectionPage(); }
        private object Activate_119_SettingsCard() { return new global::CommunityToolkit.WinUI.Controls.SettingsCard(); }
        private object Activate_122_SettingsExpander() { return new global::CommunityToolkit.WinUI.Controls.SettingsExpander(); }
        private object Activate_123_SettingsPage() { return new global::App1.SettingsPage(); }
        private object Activate_124_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void MapAdd_0_ItemTemplates(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_17_ImplicitAnimationSet(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Microsoft.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>)instance;
            var newItem = (global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>)instance;
            var newItem = (global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_54_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.SelectorBarItem>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.SelectorBarItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App1.ControlExampleSubstitution>)instance;
            var newItem = (global::App1.ControlExampleSubstitution)item;
            collection.Add(newItem);
        }
        private void VectorAdd_101_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_125_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App1.App1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  App1.ItemTemplates
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_ItemTemplates;
                userType.DictionaryAdd = MapAdd_0_ItemTemplates;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_3_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_3_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 4:   //  Boolean
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  App1.Common.NullableBooleanToBooleanConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_NullableBooleanToBooleanConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  App1.Common.NullToVisibilityConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_NullToVisibilityConverter;
                userType.AddMemberName("NonNullValue");
                userType.AddMemberName("NullValue");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  App1.Common.EmptyStringToVisibilityConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_EmptyStringToVisibilityConverter;
                userType.AddMemberName("EmptyValue");
                userType.AddMemberName("NonEmptyValue");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  App1.Common.BooleanToValueConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_BooleanToValueConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  App1.Common.DoubleToThicknessConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_DoubleToThicknessConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  App1.ItemsPageBase
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.AddMemberName("Items");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  System.Collections.Generic.IEnumerable`1<App1.Data.ControlInfoDataItem>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  App1.Controls.HomePageHeaderImage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_HomePageHeaderImage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  App1.AllControlsPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.ItemsPageBase"));
                userType.Activator = Activate_16_AllControlsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  CommunityToolkit.WinUI.Animations.ImplicitAnimationSet
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObjectCollection"));
                userType.Activator = Activate_17_ImplicitAnimationSet;
                userType.CollectionAdd = VectorAdd_17_ImplicitAnimationSet;
                xamlType = userType;
                break;

            case 18:   //  Microsoft.UI.Xaml.DependencyObjectCollection
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  CommunityToolkit.WinUI.Animations.OffsetAnimation
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>"));
                userType.Activator = Activate_20_OffsetAnimation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames");
                xamlType = userType;
                break;

            case 21:   //  CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>"));
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames");
                userType.AddMemberName("ImplicitTarget");
                xamlType = userType;
                break;

            case 22:   //  CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation"));
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames");
                userType.AddMemberName("KeyFrames");
                userType.AddMemberName("From");
                userType.AddMemberName("To");
                xamlType = userType;
                break;

            case 23:   //  CommunityToolkit.WinUI.Animations.Animation
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.AddMemberName("EasingMode");
                userType.AddMemberName("Duration");
                userType.AddMemberName("Delay");
                userType.AddMemberName("EasingType");
                userType.AddMemberName("Repeat");
                userType.AddMemberName("DelayBehavior");
                xamlType = userType;
                break;

            case 24:   //  System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_24_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                xamlType = userType;
                break;

            case 26:   //  System.Nullable`1<Microsoft.UI.Xaml.Media.Animation.EasingMode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Microsoft.UI.Xaml.Media.Animation.EasingMode"));
                userType.BoxInstance = userType.BoxType<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.ValueType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  Microsoft.UI.Xaml.Media.Animation.EasingMode
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  String
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  System.Nullable`1<TimeSpan>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("TimeSpan"));
                userType.BoxInstance = userType.BoxType<global::System.TimeSpan>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  TimeSpan
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 32:   //  System.Nullable`1<CommunityToolkit.WinUI.Animations.EasingType>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("CommunityToolkit.WinUI.Animations.EasingType"));
                userType.BoxInstance = userType.BoxType<global::CommunityToolkit.WinUI.Animations.EasingType>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  CommunityToolkit.WinUI.Animations.EasingType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::CommunityToolkit.WinUI.Animations.EasingType.Default);
                userType.AddEnumValue("Linear", global::CommunityToolkit.WinUI.Animations.EasingType.Linear);
                userType.AddEnumValue("Cubic", global::CommunityToolkit.WinUI.Animations.EasingType.Cubic);
                userType.AddEnumValue("Back", global::CommunityToolkit.WinUI.Animations.EasingType.Back);
                userType.AddEnumValue("Bounce", global::CommunityToolkit.WinUI.Animations.EasingType.Bounce);
                userType.AddEnumValue("Elastic", global::CommunityToolkit.WinUI.Animations.EasingType.Elastic);
                userType.AddEnumValue("Circle", global::CommunityToolkit.WinUI.Animations.EasingType.Circle);
                userType.AddEnumValue("Quadratic", global::CommunityToolkit.WinUI.Animations.EasingType.Quadratic);
                userType.AddEnumValue("Quartic", global::CommunityToolkit.WinUI.Animations.EasingType.Quartic);
                userType.AddEnumValue("Quintic", global::CommunityToolkit.WinUI.Animations.EasingType.Quintic);
                userType.AddEnumValue("Sine", global::CommunityToolkit.WinUI.Animations.EasingType.Sine);
                xamlType = userType;
                break;

            case 34:   //  System.Enum
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 35:   //  CommunityToolkit.WinUI.Animations.RepeatOption
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.CreateFromStringMethod = x => (global::System.Object)global::CommunityToolkit.WinUI.Animations.RepeatOption.Parse(x);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Composition.AnimationDelayBehavior
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("SetInitialValueAfterDelay", global::Microsoft.UI.Composition.AnimationDelayBehavior.SetInitialValueAfterDelay);
                userType.AddEnumValue("SetInitialValueBeforeDelay", global::Microsoft.UI.Composition.AnimationDelayBehavior.SetInitialValueBeforeDelay);
                xamlType = userType;
                break;

            case 37:   //  CommunityToolkit.WinUI.Animations.OpacityAnimation
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>"));
                userType.Activator = Activate_37_OpacityAnimation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames");
                xamlType = userType;
                break;

            case 38:   //  CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>"));
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames");
                userType.AddMemberName("ImplicitTarget");
                xamlType = userType;
                break;

            case 39:   //  CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation"));
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames");
                userType.AddMemberName("KeyFrames");
                userType.AddMemberName("From");
                userType.AddMemberName("To");
                xamlType = userType;
                break;

            case 40:   //  System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_40_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                xamlType = userType;
                break;

            case 42:   //  System.Nullable`1<Double>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Double"));
                userType.BoxInstance = userType.BoxType<global::System.Double>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Double
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Left");
                userType.AddMemberName("Top");
                userType.AddMemberName("Right");
                userType.AddMemberName("Bottom");
                xamlType = userType;
                break;

            case 45:   //  App1.Controls.SampleThemeListener
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_45_SampleThemeListener;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  Microsoft.UI.Xaml.Controls.Expander
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_46_Expander;
                userType.AddMemberName("Header");
                userType.AddMemberName("ExpandDirection");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderTemplateSelector");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 47:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Microsoft.UI.Xaml.Controls.ExpandDirection
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Down", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Down);
                userType.AddEnumValue("Up", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Up);
                xamlType = userType;
                break;

            case 49:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  Microsoft.UI.Xaml.Controls.SelectorBar
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_52_SelectorBar;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.SelectorBar.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("SelectedItem");
                xamlType = userType;
                break;

            case 53:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.SelectorBarItem>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_54_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  Microsoft.UI.Xaml.Controls.SelectorBarItem
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemContainer"));
                userType.Activator = Activate_55_SelectorBarItem;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ItemContainer.Child");
                userType.AddMemberName("Text");
                userType.AddMemberName("Icon");
                xamlType = userType;
                break;

            case 56:   //  Microsoft.UI.Xaml.Controls.ItemContainer
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_56_ItemContainer;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ItemContainer.Child");
                userType.AddMemberName("Child");
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 57:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 58:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  App1.Controls.SampleCodePresenter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_59_SampleCodePresenter;
                userType.AddMemberName("Code");
                userType.AddMemberName("SampleType");
                userType.AddMemberName("CodeSourceFile");
                userType.AddMemberName("Substitutions");
                userType.AddMemberName("IsEmpty");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  App1.Controls.SampleCodePresenterType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("XAML", global::App1.Controls.SampleCodePresenterType.XAML);
                userType.AddEnumValue("CSharp", global::App1.Controls.SampleCodePresenterType.CSharp);
                userType.AddEnumValue("Inline", global::App1.Controls.SampleCodePresenterType.Inline);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  System.Collections.Generic.IList`1<App1.ControlExampleSubstitution>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_61_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  App1.ControlExampleSubstitution
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_62_ControlExampleSubstitution;
                userType.AddMemberName("Key");
                userType.AddMemberName("Value");
                userType.AddMemberName("IsEnabled");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  CommunityToolkit.WinUI.Animations.Implicit
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("HideAnimations");
                userType.AddMemberName("ShowAnimations");
                userType.AddMemberName("Animations");
                xamlType = userType;
                break;

            case 64:   //  App1.ControlExample
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_64_ControlExample;
                userType.SetContentPropertyName("App1.ControlExample.Example");
                userType.AddMemberName("Example");
                userType.AddMemberName("HeaderText");
                userType.AddMemberName("Output");
                userType.AddMemberName("Options");
                userType.AddMemberName("Xaml");
                userType.AddMemberName("XamlSource");
                userType.AddMemberName("CSharp");
                userType.AddMemberName("CSharpSource");
                userType.AddMemberName("Substitutions");
                userType.AddMemberName("ExampleHeight");
                userType.AddMemberName("WebViewHeight");
                userType.AddMemberName("WebViewWidth");
                userType.AddMemberName("HorizontalContentAlignment");
                userType.AddMemberName("MinimumUniversalAPIContract");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Microsoft.UI.Xaml.GridLength
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  Int32
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 67:   //  Microsoft.UI.Xaml.HorizontalAlignment
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 68:   //  App1.Controls.CopyButton
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_68_CopyButton;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 69:   //  Microsoft.UI.Xaml.Controls.Button
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 70:   //  Microsoft.UI.Xaml.Controls.AnimatedIcon
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.IconElement"));
                userType.Activator = Activate_70_AnimatedIcon;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.AnimatedIcon.Source");
                userType.AddMemberName("Source");
                userType.AddMemberName("FallbackIconSource");
                userType.AddMemberName("MirroredWhenRightToLeft");
                userType.AddMemberName("State");
                xamlType = userType;
                break;

            case 71:   //  Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 72:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 73:   //  App1.Controls.HeaderTile
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_73_HeaderTile;
                userType.AddMemberName("Title");
                userType.AddMemberName("Description");
                userType.AddMemberName("Source");
                userType.AddMemberName("Link");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  CommunityToolkit.WinUI.VisualExtensions
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("NormalizedCenterPoint");
                userType.AddMemberName("AnchorPoint");
                userType.AddMemberName("CenterPoint");
                userType.AddMemberName("Offset");
                userType.AddMemberName("Translation");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("RotationAngle");
                userType.AddMemberName("RotationAngleInDegrees");
                userType.AddMemberName("RotationAxis");
                userType.AddMemberName("Scale");
                userType.AddMemberName("Size");
                xamlType = userType;
                break;

            case 75:   //  CommunityToolkit.WinUI.Converters.CollectionVisibilityConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Converters.EmptyCollectionToObjectConverter"));
                userType.Activator = Activate_75_CollectionVisibilityConverter;
                xamlType = userType;
                break;

            case 76:   //  CommunityToolkit.WinUI.Converters.EmptyCollectionToObjectConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter"));
                userType.Activator = Activate_76_EmptyCollectionToObjectConverter;
                xamlType = userType;
                break;

            case 77:   //  CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_77_EmptyObjectToObjectConverter;
                userType.AddMemberName("EmptyValue");
                userType.AddMemberName("NotEmptyValue");
                xamlType = userType;
                break;

            case 78:   //  Microsoft.UI.Xaml.Controls.TeachingTip
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_78_TeachingTip;
                userType.AddMemberName("Title");
                userType.AddMemberName("ActionButtonContent");
                userType.AddMemberName("CloseButtonContent");
                userType.AddMemberName("PreferredPlacement");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("Target");
                userType.AddMemberName("HeroContent");
                userType.AddMemberName("ActionButtonCommand");
                userType.AddMemberName("ActionButtonCommandParameter");
                userType.AddMemberName("ActionButtonStyle");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("HeroContentPlacement");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsLightDismissEnabled");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("PlacementMargin");
                userType.AddMemberName("ShouldConstrainToRootBounds");
                userType.AddMemberName("TailVisibility");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 79:   //  Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Bottom);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Left);
                userType.AddEnumValue("Right", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Right);
                userType.AddEnumValue("TopRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopRight);
                userType.AddEnumValue("TopLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopLeft);
                userType.AddEnumValue("BottomRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomRight);
                userType.AddEnumValue("BottomLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomLeft);
                userType.AddEnumValue("LeftTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftTop);
                userType.AddEnumValue("LeftBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftBottom);
                userType.AddEnumValue("RightTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightTop);
                userType.AddEnumValue("RightBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightBottom);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Center);
                xamlType = userType;
                break;

            case 80:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  System.Windows.Input.ICommand
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 82:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 83:   //  Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Bottom);
                xamlType = userType;
                break;

            case 84:   //  Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Auto);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Collapsed);
                xamlType = userType;
                break;

            case 85:   //  Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 86:   //  Microsoft.UI.Xaml.Controls.DropDownButton
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_86_DropDownButton;
                xamlType = userType;
                break;

            case 87:   //  App1.Controls.PageHeader
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_87_PageHeader;
                userType.AddMemberName("ThemeButtonVisibility");
                userType.AddMemberName("PageName");
                userType.AddMemberName("CopyLinkAction");
                userType.AddMemberName("ToggleThemeAction");
                userType.AddMemberName("Item");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 88:   //  System.Action
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 89:   //  System.MulticastDelegate
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 90:   //  System.Delegate
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 91:   //  App1.Data.ControlInfoDataItem
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 92:   //  App1.Controls.TileGallery
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_92_TileGallery;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 93:   //  App1.HomePage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.ItemsPageBase"));
                userType.Activator = Activate_93_HomePage;
                userType.AddMemberName("WinAppSdkDetails");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 94:   //  CommunityToolkit.WinUI.Converters.StringVisibilityConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Converters.EmptyStringToObjectConverter"));
                userType.Activator = Activate_94_StringVisibilityConverter;
                xamlType = userType;
                break;

            case 95:   //  CommunityToolkit.WinUI.Converters.EmptyStringToObjectConverter
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter"));
                userType.Activator = Activate_95_EmptyStringToObjectConverter;
                xamlType = userType;
                break;

            case 96:   //  App1.ItemPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_96_ItemPage;
                userType.AddMemberName("Item");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 97:   //  Microsoft.UI.Xaml.Controls.InfoBadge
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_97_InfoBadge;
                userType.AddMemberName("IconSource");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 98:   //  Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 99:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_99_NavigationView;
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 100:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 101:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_101_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 103:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 104:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 105:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 106:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 107:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 108:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 109:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 110:   //  Microsoft.UI.Xaml.CornerRadius
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("TopLeft");
                userType.AddMemberName("TopRight");
                userType.AddMemberName("BottomRight");
                userType.AddMemberName("BottomLeft");
                xamlType = userType;
                break;

            case 111:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_111_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("InfoBadge");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("SelectsOnInvoked");
                xamlType = userType;
                break;

            case 112:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 113:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_113_NavigationViewItemSeparator;
                xamlType = userType;
                break;

            case 114:   //  App1.MainTest
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_114_MainTest;
                userType.AddMemberName("DeviceFamily");
                userType.AddMemberName("NavigationViewLoaded");
                userType.AddMemberName("NavigationView");
                userType.AddMemberName("AppTitleText");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 115:   //  App1.MainTest.DeviceType
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Desktop", global::App1.MainTest.DeviceType.Desktop);
                userType.AddEnumValue("Mobile", global::App1.MainTest.DeviceType.Mobile);
                userType.AddEnumValue("Other", global::App1.MainTest.DeviceType.Other);
                userType.AddEnumValue("Xbox", global::App1.MainTest.DeviceType.Xbox);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 116:   //  App1.MainWindow
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_116_MainWindow;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 117:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 118:   //  App1.SectionPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.ItemsPageBase"));
                userType.Activator = Activate_118_SectionPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 119:   //  CommunityToolkit.WinUI.Controls.SettingsCard
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase"));
                userType.Activator = Activate_119_SettingsCard;
                userType.AddMemberName("Description");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderIcon");
                userType.AddMemberName("IsClickEnabled");
                userType.AddMemberName("ActionIcon");
                userType.AddMemberName("ContentAlignment");
                userType.AddMemberName("ActionIconToolTip");
                userType.AddMemberName("IsActionIconVisible");
                xamlType = userType;
                break;

            case 120:   //  Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 121:   //  CommunityToolkit.WinUI.Controls.ContentAlignment
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Right", global::CommunityToolkit.WinUI.Controls.ContentAlignment.Right);
                userType.AddEnumValue("Left", global::CommunityToolkit.WinUI.Controls.ContentAlignment.Left);
                userType.AddEnumValue("Vertical", global::CommunityToolkit.WinUI.Controls.ContentAlignment.Vertical);
                xamlType = userType;
                break;

            case 122:   //  CommunityToolkit.WinUI.Controls.SettingsExpander
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_122_SettingsExpander;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Controls.SettingsExpander.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("Description");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderIcon");
                userType.AddMemberName("Items");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemContainerStyleSelector");
                userType.AddMemberName("ItemsHeader");
                userType.AddMemberName("ItemsFooter");
                userType.AddMemberName("IsExpanded");
                xamlType = userType;
                break;

            case 123:   //  App1.SettingsPage
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_123_SettingsPage;
                userType.AddMemberName("Version");
                userType.AddMemberName("WinAppSdkRuntimeDetails");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 124:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_124_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 125:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_125_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::CommunityToolkit.WinUI.Controls.SettingsControlsRns.CommunityToolkit_WinUI_Controls_SettingsControls_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_NullToVisibilityConverter_NonNullValue(object instance)
        {
            var that = (global::App1.Common.NullToVisibilityConverter)instance;
            return that.NonNullValue;
        }
        private void set_1_NullToVisibilityConverter_NonNullValue(object instance, object Value)
        {
            var that = (global::App1.Common.NullToVisibilityConverter)instance;
            that.NonNullValue = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_2_NullToVisibilityConverter_NullValue(object instance)
        {
            var that = (global::App1.Common.NullToVisibilityConverter)instance;
            return that.NullValue;
        }
        private void set_2_NullToVisibilityConverter_NullValue(object instance, object Value)
        {
            var that = (global::App1.Common.NullToVisibilityConverter)instance;
            that.NullValue = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_3_EmptyStringToVisibilityConverter_EmptyValue(object instance)
        {
            var that = (global::App1.Common.EmptyStringToVisibilityConverter)instance;
            return that.EmptyValue;
        }
        private void set_3_EmptyStringToVisibilityConverter_EmptyValue(object instance, object Value)
        {
            var that = (global::App1.Common.EmptyStringToVisibilityConverter)instance;
            that.EmptyValue = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_4_EmptyStringToVisibilityConverter_NonEmptyValue(object instance)
        {
            var that = (global::App1.Common.EmptyStringToVisibilityConverter)instance;
            return that.NonEmptyValue;
        }
        private void set_4_EmptyStringToVisibilityConverter_NonEmptyValue(object instance, object Value)
        {
            var that = (global::App1.Common.EmptyStringToVisibilityConverter)instance;
            that.NonEmptyValue = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_5_ItemsPageBase_Items(object instance)
        {
            var that = (global::App1.ItemsPageBase)instance;
            return that.Items;
        }
        private void set_5_ItemsPageBase_Items(object instance, object Value)
        {
            var that = (global::App1.ItemsPageBase)instance;
            that.Items = (global::System.Collections.Generic.IEnumerable<global::App1.Data.ControlInfoDataItem>)Value;
        }
        private object get_6_Animation_KeyFrames(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.KeyFrames;
        }
        private void set_6_Animation_KeyFrames(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.KeyFrames = (global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>)Value;
        }
        private object get_7_Animation_EasingMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.EasingMode;
        }
        private void set_7_Animation_EasingMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.EasingMode = (global::System.Nullable<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>)Value;
        }
        private object get_8_Animation_From(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.From;
        }
        private void set_8_Animation_From(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.From = (global::System.String)Value;
        }
        private object get_9_Animation_To(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.To;
        }
        private void set_9_Animation_To(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.To = (global::System.String)Value;
        }
        private object get_10_Animation_Duration(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.Duration;
        }
        private void set_10_Animation_Duration(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.Duration = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_11_ImplicitAnimation_ImplicitTarget(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.ImplicitTarget;
        }
        private void set_11_ImplicitAnimation_ImplicitTarget(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.ImplicitTarget = (global::System.String)Value;
        }
        private object get_12_Animation_Delay(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.Delay;
        }
        private void set_12_Animation_Delay(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.Delay = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_13_Animation_EasingType(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.EasingType;
        }
        private void set_13_Animation_EasingType(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.EasingType = (global::System.Nullable<global::CommunityToolkit.WinUI.Animations.EasingType>)Value;
        }
        private object get_14_Animation_Repeat(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.Repeat;
        }
        private void set_14_Animation_Repeat(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.Repeat = (global::CommunityToolkit.WinUI.Animations.RepeatOption)Value;
        }
        private object get_15_Animation_DelayBehavior(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.DelayBehavior;
        }
        private void set_15_Animation_DelayBehavior(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.DelayBehavior = (global::Microsoft.UI.Composition.AnimationDelayBehavior)Value;
        }
        private object get_16_Animation_KeyFrames(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.KeyFrames;
        }
        private void set_16_Animation_KeyFrames(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.KeyFrames = (global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>)Value;
        }
        private object get_17_Animation_From(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.From;
        }
        private void set_17_Animation_From(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.From = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_18_Animation_To(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.To;
        }
        private void set_18_Animation_To(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.To = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_19_ImplicitAnimation_ImplicitTarget(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.ImplicitTarget;
        }
        private void set_19_ImplicitAnimation_ImplicitTarget(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.ImplicitTarget = (global::System.String)Value;
        }
        private object get_20_Thickness_Left(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Left;
        }
        private void set_20_Thickness_Left(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Left = (global::System.Double)Value;
        }
        private object get_21_Thickness_Top(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Top;
        }
        private void set_21_Thickness_Top(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Top = (global::System.Double)Value;
        }
        private object get_22_Thickness_Right(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Right;
        }
        private void set_22_Thickness_Right(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Right = (global::System.Double)Value;
        }
        private object get_23_Thickness_Bottom(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Bottom;
        }
        private void set_23_Thickness_Bottom(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Bottom = (global::System.Double)Value;
        }
        private object get_24_Expander_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.Header;
        }
        private void set_24_Expander_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_25_Expander_ExpandDirection(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.ExpandDirection;
        }
        private void set_25_Expander_ExpandDirection(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.ExpandDirection = (global::Microsoft.UI.Xaml.Controls.ExpandDirection)Value;
        }
        private object get_26_Expander_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplate;
        }
        private void set_26_Expander_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_27_Expander_HeaderTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplateSelector;
        }
        private void set_27_Expander_HeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_28_Expander_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.IsExpanded;
        }
        private void set_28_Expander_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_29_Expander_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.TemplateSettings;
        }
        private object get_30_SelectorBar_Items(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBar)instance;
            return that.Items;
        }
        private object get_31_ItemContainer_Child(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            return that.Child;
        }
        private void set_31_ItemContainer_Child(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            that.Child = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_32_SelectorBarItem_Text(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBarItem)instance;
            return that.Text;
        }
        private void set_32_SelectorBarItem_Text(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBarItem)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_33_SelectorBarItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBarItem)instance;
            return that.Icon;
        }
        private void set_33_SelectorBarItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBarItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_34_ItemContainer_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            return that.IsSelected;
        }
        private void set_34_ItemContainer_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_35_SelectorBar_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBar)instance;
            return that.SelectedItem;
        }
        private void set_35_SelectorBar_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SelectorBar)instance;
            that.SelectedItem = (global::Microsoft.UI.Xaml.Controls.SelectorBarItem)Value;
        }
        private object get_36_SampleCodePresenter_Code(object instance)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            return that.Code;
        }
        private void set_36_SampleCodePresenter_Code(object instance, object Value)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            that.Code = (global::System.String)Value;
        }
        private object get_37_SampleCodePresenter_SampleType(object instance)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            return that.SampleType;
        }
        private void set_37_SampleCodePresenter_SampleType(object instance, object Value)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            that.SampleType = (global::App1.Controls.SampleCodePresenterType)Value;
        }
        private object get_38_SampleCodePresenter_CodeSourceFile(object instance)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            return that.CodeSourceFile;
        }
        private void set_38_SampleCodePresenter_CodeSourceFile(object instance, object Value)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            that.CodeSourceFile = (global::System.String)Value;
        }
        private object get_39_SampleCodePresenter_Substitutions(object instance)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            return that.Substitutions;
        }
        private void set_39_SampleCodePresenter_Substitutions(object instance, object Value)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            that.Substitutions = (global::System.Collections.Generic.IList<global::App1.ControlExampleSubstitution>)Value;
        }
        private object get_40_ControlExampleSubstitution_Key(object instance)
        {
            var that = (global::App1.ControlExampleSubstitution)instance;
            return that.Key;
        }
        private void set_40_ControlExampleSubstitution_Key(object instance, object Value)
        {
            var that = (global::App1.ControlExampleSubstitution)instance;
            that.Key = (global::System.String)Value;
        }
        private object get_41_ControlExampleSubstitution_Value(object instance)
        {
            var that = (global::App1.ControlExampleSubstitution)instance;
            return that.Value;
        }
        private void set_41_ControlExampleSubstitution_Value(object instance, object Value)
        {
            var that = (global::App1.ControlExampleSubstitution)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_42_ControlExampleSubstitution_IsEnabled(object instance)
        {
            var that = (global::App1.ControlExampleSubstitution)instance;
            return that.IsEnabled;
        }
        private void set_42_ControlExampleSubstitution_IsEnabled(object instance, object Value)
        {
            var that = (global::App1.ControlExampleSubstitution)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_43_SampleCodePresenter_IsEmpty(object instance)
        {
            var that = (global::App1.Controls.SampleCodePresenter)instance;
            return that.IsEmpty;
        }
        private object get_44_Implicit_HideAnimations(object instance)
        {
            return global::CommunityToolkit.WinUI.Animations.Implicit.GetHideAnimations((global::Microsoft.UI.Xaml.UIElement)instance);
        }
        private void set_44_Implicit_HideAnimations(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.Animations.Implicit.SetHideAnimations((global::Microsoft.UI.Xaml.UIElement)instance, (global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet)Value);
        }
        private object get_45_Implicit_ShowAnimations(object instance)
        {
            return global::CommunityToolkit.WinUI.Animations.Implicit.GetShowAnimations((global::Microsoft.UI.Xaml.UIElement)instance);
        }
        private void set_45_Implicit_ShowAnimations(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.Animations.Implicit.SetShowAnimations((global::Microsoft.UI.Xaml.UIElement)instance, (global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet)Value);
        }
        private object get_46_Implicit_Animations(object instance)
        {
            return global::CommunityToolkit.WinUI.Animations.Implicit.GetAnimations((global::Microsoft.UI.Xaml.UIElement)instance);
        }
        private void set_46_Implicit_Animations(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.Animations.Implicit.SetAnimations((global::Microsoft.UI.Xaml.UIElement)instance, (global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet)Value);
        }
        private object get_47_ControlExample_Example(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.Example;
        }
        private void set_47_ControlExample_Example(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.Example = (global::System.Object)Value;
        }
        private object get_48_ControlExample_HeaderText(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.HeaderText;
        }
        private void set_48_ControlExample_HeaderText(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.HeaderText = (global::System.String)Value;
        }
        private object get_49_ControlExample_Output(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.Output;
        }
        private void set_49_ControlExample_Output(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.Output = (global::System.Object)Value;
        }
        private object get_50_ControlExample_Options(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.Options;
        }
        private void set_50_ControlExample_Options(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.Options = (global::System.Object)Value;
        }
        private object get_51_ControlExample_Xaml(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.Xaml;
        }
        private void set_51_ControlExample_Xaml(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.Xaml = (global::System.String)Value;
        }
        private object get_52_ControlExample_XamlSource(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.XamlSource;
        }
        private void set_52_ControlExample_XamlSource(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.XamlSource = (global::System.String)Value;
        }
        private object get_53_ControlExample_CSharp(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.CSharp;
        }
        private void set_53_ControlExample_CSharp(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.CSharp = (global::System.String)Value;
        }
        private object get_54_ControlExample_CSharpSource(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.CSharpSource;
        }
        private void set_54_ControlExample_CSharpSource(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.CSharpSource = (global::System.String)Value;
        }
        private object get_55_ControlExample_Substitutions(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.Substitutions;
        }
        private void set_55_ControlExample_Substitutions(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.Substitutions = (global::System.Collections.Generic.IList<global::App1.ControlExampleSubstitution>)Value;
        }
        private object get_56_ControlExample_ExampleHeight(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.ExampleHeight;
        }
        private void set_56_ControlExample_ExampleHeight(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.ExampleHeight = (global::Microsoft.UI.Xaml.GridLength)Value;
        }
        private object get_57_ControlExample_WebViewHeight(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.WebViewHeight;
        }
        private void set_57_ControlExample_WebViewHeight(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.WebViewHeight = (global::System.Int32)Value;
        }
        private object get_58_ControlExample_WebViewWidth(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.WebViewWidth;
        }
        private void set_58_ControlExample_WebViewWidth(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.WebViewWidth = (global::System.Int32)Value;
        }
        private object get_59_ControlExample_HorizontalContentAlignment(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.HorizontalContentAlignment;
        }
        private void set_59_ControlExample_HorizontalContentAlignment(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.HorizontalContentAlignment = (global::Microsoft.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_60_ControlExample_MinimumUniversalAPIContract(object instance)
        {
            var that = (global::App1.ControlExample)instance;
            return that.MinimumUniversalAPIContract;
        }
        private void set_60_ControlExample_MinimumUniversalAPIContract(object instance, object Value)
        {
            var that = (global::App1.ControlExample)instance;
            that.MinimumUniversalAPIContract = (global::System.Int32)Value;
        }
        private object get_61_AnimatedIcon_Source(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.AnimatedIcon)instance;
            return that.Source;
        }
        private void set_61_AnimatedIcon_Source(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.AnimatedIcon)instance;
            that.Source = (global::Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2)Value;
        }
        private object get_62_AnimatedIcon_FallbackIconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.AnimatedIcon)instance;
            return that.FallbackIconSource;
        }
        private void set_62_AnimatedIcon_FallbackIconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.AnimatedIcon)instance;
            that.FallbackIconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_63_AnimatedIcon_MirroredWhenRightToLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.AnimatedIcon)instance;
            return that.MirroredWhenRightToLeft;
        }
        private void set_63_AnimatedIcon_MirroredWhenRightToLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.AnimatedIcon)instance;
            that.MirroredWhenRightToLeft = (global::System.Boolean)Value;
        }
        private object get_64_AnimatedIcon_State(object instance)
        {
            return global::Microsoft.UI.Xaml.Controls.AnimatedIcon.GetState((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_64_AnimatedIcon_State(object instance, object Value)
        {
            global::Microsoft.UI.Xaml.Controls.AnimatedIcon.SetState((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_65_HeaderTile_Title(object instance)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            return that.Title;
        }
        private void set_65_HeaderTile_Title(object instance, object Value)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_66_HeaderTile_Description(object instance)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            return that.Description;
        }
        private void set_66_HeaderTile_Description(object instance, object Value)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_67_HeaderTile_Source(object instance)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            return that.Source;
        }
        private void set_67_HeaderTile_Source(object instance, object Value)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            that.Source = (global::System.Object)Value;
        }
        private object get_68_HeaderTile_Link(object instance)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            return that.Link;
        }
        private void set_68_HeaderTile_Link(object instance, object Value)
        {
            var that = (global::App1.Controls.HeaderTile)instance;
            that.Link = (global::System.String)Value;
        }
        private object get_69_VisualExtensions_NormalizedCenterPoint(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetNormalizedCenterPoint((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_69_VisualExtensions_NormalizedCenterPoint(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetNormalizedCenterPoint((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_70_VisualExtensions_AnchorPoint(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetAnchorPoint((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_70_VisualExtensions_AnchorPoint(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetAnchorPoint((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_71_VisualExtensions_CenterPoint(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetCenterPoint((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_71_VisualExtensions_CenterPoint(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetCenterPoint((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_72_VisualExtensions_Offset(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetOffset((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_72_VisualExtensions_Offset(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetOffset((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_73_VisualExtensions_Translation(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetTranslation((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_73_VisualExtensions_Translation(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetTranslation((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_74_VisualExtensions_Opacity(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetOpacity((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_74_VisualExtensions_Opacity(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetOpacity((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.Double)Value);
        }
        private object get_75_VisualExtensions_RotationAngle(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetRotationAngle((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_75_VisualExtensions_RotationAngle(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetRotationAngle((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.Double)Value);
        }
        private object get_76_VisualExtensions_RotationAngleInDegrees(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetRotationAngleInDegrees((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_76_VisualExtensions_RotationAngleInDegrees(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetRotationAngleInDegrees((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.Double)Value);
        }
        private object get_77_VisualExtensions_RotationAxis(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetRotationAxis((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_77_VisualExtensions_RotationAxis(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetRotationAxis((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_78_VisualExtensions_Scale(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetScale((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_78_VisualExtensions_Scale(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetScale((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_79_VisualExtensions_Size(object instance)
        {
            return global::CommunityToolkit.WinUI.VisualExtensions.GetSize((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_79_VisualExtensions_Size(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.VisualExtensions.SetSize((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_80_EmptyObjectToObjectConverter_EmptyValue(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter)instance;
            return that.EmptyValue;
        }
        private void set_80_EmptyObjectToObjectConverter_EmptyValue(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter)instance;
            that.EmptyValue = (global::System.Object)Value;
        }
        private object get_81_EmptyObjectToObjectConverter_NotEmptyValue(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter)instance;
            return that.NotEmptyValue;
        }
        private void set_81_EmptyObjectToObjectConverter_NotEmptyValue(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter)instance;
            that.NotEmptyValue = (global::System.Object)Value;
        }
        private object get_82_TeachingTip_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Title;
        }
        private void set_82_TeachingTip_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_83_TeachingTip_ActionButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonContent;
        }
        private void set_83_TeachingTip_ActionButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonContent = (global::System.Object)Value;
        }
        private object get_84_TeachingTip_CloseButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonContent;
        }
        private void set_84_TeachingTip_CloseButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonContent = (global::System.Object)Value;
        }
        private object get_85_TeachingTip_PreferredPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PreferredPlacement;
        }
        private void set_85_TeachingTip_PreferredPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PreferredPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode)Value;
        }
        private object get_86_TeachingTip_Subtitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Subtitle;
        }
        private void set_86_TeachingTip_Subtitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_87_TeachingTip_Target(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Target;
        }
        private void set_87_TeachingTip_Target(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Target = (global::Microsoft.UI.Xaml.FrameworkElement)Value;
        }
        private object get_88_TeachingTip_HeroContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContent;
        }
        private void set_88_TeachingTip_HeroContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_89_TeachingTip_ActionButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommand;
        }
        private void set_89_TeachingTip_ActionButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_90_TeachingTip_ActionButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommandParameter;
        }
        private void set_90_TeachingTip_ActionButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_91_TeachingTip_ActionButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonStyle;
        }
        private void set_91_TeachingTip_ActionButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_92_TeachingTip_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommand;
        }
        private void set_92_TeachingTip_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_93_TeachingTip_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_93_TeachingTip_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_94_TeachingTip_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonStyle;
        }
        private void set_94_TeachingTip_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_95_TeachingTip_HeroContentPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContentPlacement;
        }
        private void set_95_TeachingTip_HeroContentPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContentPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode)Value;
        }
        private object get_96_TeachingTip_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IconSource;
        }
        private void set_96_TeachingTip_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_97_TeachingTip_IsLightDismissEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_97_TeachingTip_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_98_TeachingTip_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsOpen;
        }
        private void set_98_TeachingTip_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_99_TeachingTip_PlacementMargin(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PlacementMargin;
        }
        private void set_99_TeachingTip_PlacementMargin(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PlacementMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_100_TeachingTip_ShouldConstrainToRootBounds(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ShouldConstrainToRootBounds;
        }
        private void set_100_TeachingTip_ShouldConstrainToRootBounds(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ShouldConstrainToRootBounds = (global::System.Boolean)Value;
        }
        private object get_101_TeachingTip_TailVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TailVisibility;
        }
        private void set_101_TeachingTip_TailVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.TailVisibility = (global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility)Value;
        }
        private object get_102_TeachingTip_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TemplateSettings;
        }
        private object get_103_PageHeader_ThemeButtonVisibility(object instance)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            return that.ThemeButtonVisibility;
        }
        private void set_103_PageHeader_ThemeButtonVisibility(object instance, object Value)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            that.ThemeButtonVisibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_104_PageHeader_PageName(object instance)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            return that.PageName;
        }
        private void set_104_PageHeader_PageName(object instance, object Value)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            that.PageName = (global::System.String)Value;
        }
        private object get_105_PageHeader_CopyLinkAction(object instance)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            return that.CopyLinkAction;
        }
        private void set_105_PageHeader_CopyLinkAction(object instance, object Value)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            that.CopyLinkAction = (global::System.Action)Value;
        }
        private object get_106_PageHeader_ToggleThemeAction(object instance)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            return that.ToggleThemeAction;
        }
        private void set_106_PageHeader_ToggleThemeAction(object instance, object Value)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            that.ToggleThemeAction = (global::System.Action)Value;
        }
        private object get_107_PageHeader_Item(object instance)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            return that.Item;
        }
        private void set_107_PageHeader_Item(object instance, object Value)
        {
            var that = (global::App1.Controls.PageHeader)instance;
            that.Item = (global::App1.Data.ControlInfoDataItem)Value;
        }
        private object get_108_HomePage_WinAppSdkDetails(object instance)
        {
            var that = (global::App1.HomePage)instance;
            return that.WinAppSdkDetails;
        }
        private object get_109_ItemPage_Item(object instance)
        {
            var that = (global::App1.ItemPage)instance;
            return that.Item;
        }
        private void set_109_ItemPage_Item(object instance, object Value)
        {
            var that = (global::App1.ItemPage)instance;
            that.Item = (global::App1.Data.ControlInfoDataItem)Value;
        }
        private object get_110_InfoBadge_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.IconSource;
        }
        private void set_110_InfoBadge_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_111_InfoBadge_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.TemplateSettings;
        }
        private object get_112_InfoBadge_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.Value;
        }
        private void set_112_InfoBadge_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_113_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_113_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_114_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_114_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_115_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_116_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_116_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_117_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_117_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_118_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_118_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_119_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_119_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_120_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_121_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_121_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_122_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_123_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_123_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_124_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_124_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_125_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_125_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_126_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_126_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_127_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_127_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_128_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_128_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_129_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_129_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_130_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_130_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_131_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_131_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_132_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_132_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_133_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_133_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_134_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_134_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_135_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_135_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_136_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_136_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_137_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_137_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_138_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_138_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_139_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_139_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_140_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_140_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_141_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_141_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_142_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_142_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_143_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_143_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_144_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_144_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_145_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_145_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_146_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_146_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_147_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_148_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_148_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_149_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_150_CornerRadius_TopLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopLeft;
        }
        private void set_150_CornerRadius_TopLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopLeft = (global::System.Double)Value;
        }
        private object get_151_CornerRadius_TopRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopRight;
        }
        private void set_151_CornerRadius_TopRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopRight = (global::System.Double)Value;
        }
        private object get_152_CornerRadius_BottomRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomRight;
        }
        private void set_152_CornerRadius_BottomRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomRight = (global::System.Double)Value;
        }
        private object get_153_CornerRadius_BottomLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomLeft;
        }
        private void set_153_CornerRadius_BottomLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomLeft = (global::System.Double)Value;
        }
        private object get_154_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_154_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_155_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_156_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_157_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_157_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_158_NavigationViewItem_InfoBadge(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.InfoBadge;
        }
        private void set_158_NavigationViewItem_InfoBadge(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.InfoBadge = (global::Microsoft.UI.Xaml.Controls.InfoBadge)Value;
        }
        private object get_159_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_159_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_160_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_160_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_161_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_161_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_162_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_162_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_163_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_163_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_164_MainTest_DeviceFamily(object instance)
        {
            var that = (global::App1.MainTest)instance;
            return that.DeviceFamily;
        }
        private void set_164_MainTest_DeviceFamily(object instance, object Value)
        {
            var that = (global::App1.MainTest)instance;
            that.DeviceFamily = (global::App1.MainTest.DeviceType)Value;
        }
        private object get_165_MainTest_NavigationViewLoaded(object instance)
        {
            var that = (global::App1.MainTest)instance;
            return that.NavigationViewLoaded;
        }
        private void set_165_MainTest_NavigationViewLoaded(object instance, object Value)
        {
            var that = (global::App1.MainTest)instance;
            that.NavigationViewLoaded = (global::System.Action)Value;
        }
        private object get_166_MainTest_NavigationView(object instance)
        {
            var that = (global::App1.MainTest)instance;
            return that.NavigationView;
        }
        private object get_167_MainTest_AppTitleText(object instance)
        {
            var that = (global::App1.MainTest)instance;
            return that.AppTitleText;
        }
        private object get_168_SettingsCard_Description(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.Description;
        }
        private void set_168_SettingsCard_Description(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_169_SettingsCard_Header(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.Header;
        }
        private void set_169_SettingsCard_Header(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_170_SettingsCard_HeaderIcon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.HeaderIcon;
        }
        private void set_170_SettingsCard_HeaderIcon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.HeaderIcon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_171_SettingsCard_IsClickEnabled(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.IsClickEnabled;
        }
        private void set_171_SettingsCard_IsClickEnabled(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.IsClickEnabled = (global::System.Boolean)Value;
        }
        private object get_172_SettingsCard_ActionIcon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.ActionIcon;
        }
        private void set_172_SettingsCard_ActionIcon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.ActionIcon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_173_SettingsCard_ContentAlignment(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.ContentAlignment;
        }
        private void set_173_SettingsCard_ContentAlignment(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.ContentAlignment = (global::CommunityToolkit.WinUI.Controls.ContentAlignment)Value;
        }
        private object get_174_SettingsCard_ActionIconToolTip(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.ActionIconToolTip;
        }
        private void set_174_SettingsCard_ActionIconToolTip(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.ActionIconToolTip = (global::System.String)Value;
        }
        private object get_175_SettingsCard_IsActionIconVisible(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.IsActionIconVisible;
        }
        private void set_175_SettingsCard_IsActionIconVisible(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.IsActionIconVisible = (global::System.Boolean)Value;
        }
        private object get_176_SettingsExpander_Content(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Content;
        }
        private void set_176_SettingsExpander_Content(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_177_SettingsExpander_Description(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Description;
        }
        private void set_177_SettingsExpander_Description(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_178_SettingsExpander_Header(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Header;
        }
        private void set_178_SettingsExpander_Header(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_179_SettingsExpander_HeaderIcon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.HeaderIcon;
        }
        private void set_179_SettingsExpander_HeaderIcon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.HeaderIcon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_180_SettingsExpander_Items(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Items;
        }
        private void set_180_SettingsExpander_Items(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Items = (global::System.Collections.Generic.IList<global::System.Object>)Value;
        }
        private object get_181_SettingsExpander_ItemsSource(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemsSource;
        }
        private void set_181_SettingsExpander_ItemsSource(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_182_SettingsExpander_ItemTemplate(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemTemplate;
        }
        private void set_182_SettingsExpander_ItemTemplate(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_183_SettingsExpander_ItemContainerStyleSelector(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemContainerStyleSelector;
        }
        private void set_183_SettingsExpander_ItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_184_SettingsExpander_ItemsHeader(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemsHeader;
        }
        private void set_184_SettingsExpander_ItemsHeader(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemsHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_185_SettingsExpander_ItemsFooter(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemsFooter;
        }
        private void set_185_SettingsExpander_ItemsFooter(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemsFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_186_SettingsExpander_IsExpanded(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.IsExpanded;
        }
        private void set_186_SettingsExpander_IsExpanded(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_187_SettingsPage_Version(object instance)
        {
            var that = (global::App1.SettingsPage)instance;
            return that.Version;
        }
        private object get_188_SettingsPage_WinAppSdkRuntimeDetails(object instance)
        {
            var that = (global::App1.SettingsPage)instance;
            return that.WinAppSdkRuntimeDetails;
        }
        private object get_189_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_190_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_190_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_191_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_192_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_193_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_193_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_194_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_194_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_195_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App1.App1_XamlTypeInfo.XamlMember xamlMember = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "App1.Common.NullToVisibilityConverter.NonNullValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Common.NullToVisibilityConverter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NonNullValue", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_1_NullToVisibilityConverter_NonNullValue;
                xamlMember.Setter = set_1_NullToVisibilityConverter_NonNullValue;
                break;
            case "App1.Common.NullToVisibilityConverter.NullValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Common.NullToVisibilityConverter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NullValue", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_2_NullToVisibilityConverter_NullValue;
                xamlMember.Setter = set_2_NullToVisibilityConverter_NullValue;
                break;
            case "App1.Common.EmptyStringToVisibilityConverter.EmptyValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Common.EmptyStringToVisibilityConverter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EmptyValue", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_3_EmptyStringToVisibilityConverter_EmptyValue;
                xamlMember.Setter = set_3_EmptyStringToVisibilityConverter_EmptyValue;
                break;
            case "App1.Common.EmptyStringToVisibilityConverter.NonEmptyValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Common.EmptyStringToVisibilityConverter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NonEmptyValue", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_4_EmptyStringToVisibilityConverter_NonEmptyValue;
                xamlMember.Setter = set_4_EmptyStringToVisibilityConverter_NonEmptyValue;
                break;
            case "App1.ItemsPageBase.Items":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ItemsPageBase");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IEnumerable`1<App1.Data.ControlInfoDataItem>");
                xamlMember.Getter = get_5_ItemsPageBase_Items;
                xamlMember.Setter = set_5_ItemsPageBase_Items;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "KeyFrames", "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_Animation_KeyFrames;
                xamlMember.Setter = set_6_Animation_KeyFrames;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.EasingMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EasingMode", "System.Nullable`1<Microsoft.UI.Xaml.Media.Animation.EasingMode>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_Animation_EasingMode;
                xamlMember.Setter = set_7_Animation_EasingMode;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.From":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "From", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_Animation_From;
                xamlMember.Setter = set_8_Animation_From;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.To":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "To", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_Animation_To;
                xamlMember.Setter = set_9_Animation_To;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.Duration":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Duration", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_Animation_Duration;
                xamlMember.Setter = set_10_Animation_Duration;
                break;
            case "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>.ImplicitTarget":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ImplicitTarget", "String");
                xamlMember.Getter = get_11_ImplicitAnimation_ImplicitTarget;
                xamlMember.Setter = set_11_ImplicitAnimation_ImplicitTarget;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.Delay":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Delay", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_Animation_Delay;
                xamlMember.Setter = set_12_Animation_Delay;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.EasingType":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EasingType", "System.Nullable`1<CommunityToolkit.WinUI.Animations.EasingType>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_Animation_EasingType;
                xamlMember.Setter = set_13_Animation_EasingType;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.Repeat":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Repeat", "CommunityToolkit.WinUI.Animations.RepeatOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_Animation_Repeat;
                xamlMember.Setter = set_14_Animation_Repeat;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.DelayBehavior":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DelayBehavior", "Microsoft.UI.Composition.AnimationDelayBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_Animation_DelayBehavior;
                xamlMember.Setter = set_15_Animation_DelayBehavior;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "KeyFrames", "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_Animation_KeyFrames;
                xamlMember.Setter = set_16_Animation_KeyFrames;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.From":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "From", "System.Nullable`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_Animation_From;
                xamlMember.Setter = set_17_Animation_From;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.To":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "To", "System.Nullable`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_Animation_To;
                xamlMember.Setter = set_18_Animation_To;
                break;
            case "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>.ImplicitTarget":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ImplicitTarget", "String");
                xamlMember.Getter = get_19_ImplicitAnimation_ImplicitTarget;
                xamlMember.Setter = set_19_ImplicitAnimation_ImplicitTarget;
                break;
            case "Microsoft.UI.Xaml.Thickness.Left":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Left", "Double");
                xamlMember.Getter = get_20_Thickness_Left;
                xamlMember.Setter = set_20_Thickness_Left;
                break;
            case "Microsoft.UI.Xaml.Thickness.Top":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Top", "Double");
                xamlMember.Getter = get_21_Thickness_Top;
                xamlMember.Setter = set_21_Thickness_Top;
                break;
            case "Microsoft.UI.Xaml.Thickness.Right":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Right", "Double");
                xamlMember.Getter = get_22_Thickness_Right;
                xamlMember.Setter = set_22_Thickness_Right;
                break;
            case "Microsoft.UI.Xaml.Thickness.Bottom":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Bottom", "Double");
                xamlMember.Getter = get_23_Thickness_Bottom;
                xamlMember.Setter = set_23_Thickness_Bottom;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.Header":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_Expander_Header;
                xamlMember.Setter = set_24_Expander_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.ExpandDirection":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ExpandDirection", "Microsoft.UI.Xaml.Controls.ExpandDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_Expander_ExpandDirection;
                xamlMember.Setter = set_25_Expander_ExpandDirection;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_Expander_HeaderTemplate;
                xamlMember.Setter = set_26_Expander_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplateSelector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeaderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_Expander_HeaderTemplateSelector;
                xamlMember.Setter = set_27_Expander_HeaderTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.IsExpanded":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_Expander_IsExpanded;
                xamlMember.Setter = set_28_Expander_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.TemplateSettings":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings");
                xamlMember.Getter = get_29_Expander_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.SelectorBar.Items":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SelectorBar");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.SelectorBarItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_SelectorBar_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemContainer.Child":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemContainer");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Child", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ItemContainer_Child;
                xamlMember.Setter = set_31_ItemContainer_Child;
                break;
            case "Microsoft.UI.Xaml.Controls.SelectorBarItem.Text":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SelectorBarItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_SelectorBarItem_Text;
                xamlMember.Setter = set_32_SelectorBarItem_Text;
                break;
            case "Microsoft.UI.Xaml.Controls.SelectorBarItem.Icon":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SelectorBarItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_SelectorBarItem_Icon;
                xamlMember.Setter = set_33_SelectorBarItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemContainer.IsSelected":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemContainer");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ItemContainer_IsSelected;
                xamlMember.Setter = set_34_ItemContainer_IsSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.SelectorBar.SelectedItem":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SelectorBar");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SelectedItem", "Microsoft.UI.Xaml.Controls.SelectorBarItem");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_SelectorBar_SelectedItem;
                xamlMember.Setter = set_35_SelectorBar_SelectedItem;
                break;
            case "App1.Controls.SampleCodePresenter.Code":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.SampleCodePresenter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Code", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_SampleCodePresenter_Code;
                xamlMember.Setter = set_36_SampleCodePresenter_Code;
                break;
            case "App1.Controls.SampleCodePresenter.SampleType":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.SampleCodePresenter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SampleType", "App1.Controls.SampleCodePresenterType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_SampleCodePresenter_SampleType;
                xamlMember.Setter = set_37_SampleCodePresenter_SampleType;
                break;
            case "App1.Controls.SampleCodePresenter.CodeSourceFile":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.SampleCodePresenter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CodeSourceFile", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_SampleCodePresenter_CodeSourceFile;
                xamlMember.Setter = set_38_SampleCodePresenter_CodeSourceFile;
                break;
            case "App1.Controls.SampleCodePresenter.Substitutions":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.SampleCodePresenter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Substitutions", "System.Collections.Generic.IList`1<App1.ControlExampleSubstitution>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_SampleCodePresenter_Substitutions;
                xamlMember.Setter = set_39_SampleCodePresenter_Substitutions;
                break;
            case "App1.ControlExampleSubstitution.Key":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExampleSubstitution");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Key", "String");
                xamlMember.Getter = get_40_ControlExampleSubstitution_Key;
                xamlMember.Setter = set_40_ControlExampleSubstitution_Key;
                break;
            case "App1.ControlExampleSubstitution.Value":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExampleSubstitution");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.Getter = get_41_ControlExampleSubstitution_Value;
                xamlMember.Setter = set_41_ControlExampleSubstitution_Value;
                break;
            case "App1.ControlExampleSubstitution.IsEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExampleSubstitution");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.Getter = get_42_ControlExampleSubstitution_IsEnabled;
                xamlMember.Setter = set_42_ControlExampleSubstitution_IsEnabled;
                break;
            case "App1.Controls.SampleCodePresenter.IsEmpty":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.SampleCodePresenter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsEmpty", "Boolean");
                xamlMember.Getter = get_43_SampleCodePresenter_IsEmpty;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.Animations.Implicit.HideAnimations":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Implicit");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HideAnimations", "CommunityToolkit.WinUI.Animations.ImplicitAnimationSet");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_44_Implicit_HideAnimations;
                xamlMember.Setter = set_44_Implicit_HideAnimations;
                break;
            case "CommunityToolkit.WinUI.Animations.Implicit.ShowAnimations":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Implicit");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShowAnimations", "CommunityToolkit.WinUI.Animations.ImplicitAnimationSet");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_45_Implicit_ShowAnimations;
                xamlMember.Setter = set_45_Implicit_ShowAnimations;
                break;
            case "CommunityToolkit.WinUI.Animations.Implicit.Animations":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Implicit");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Animations", "CommunityToolkit.WinUI.Animations.ImplicitAnimationSet");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_46_Implicit_Animations;
                xamlMember.Setter = set_46_Implicit_Animations;
                break;
            case "App1.ControlExample.Example":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Example", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_ControlExample_Example;
                xamlMember.Setter = set_47_ControlExample_Example;
                break;
            case "App1.ControlExample.HeaderText":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeaderText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ControlExample_HeaderText;
                xamlMember.Setter = set_48_ControlExample_HeaderText;
                break;
            case "App1.ControlExample.Output":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Output", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_ControlExample_Output;
                xamlMember.Setter = set_49_ControlExample_Output;
                break;
            case "App1.ControlExample.Options":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Options", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ControlExample_Options;
                xamlMember.Setter = set_50_ControlExample_Options;
                break;
            case "App1.ControlExample.Xaml":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Xaml", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_ControlExample_Xaml;
                xamlMember.Setter = set_51_ControlExample_Xaml;
                break;
            case "App1.ControlExample.XamlSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "XamlSource", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_ControlExample_XamlSource;
                xamlMember.Setter = set_52_ControlExample_XamlSource;
                break;
            case "App1.ControlExample.CSharp":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CSharp", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_ControlExample_CSharp;
                xamlMember.Setter = set_53_ControlExample_CSharp;
                break;
            case "App1.ControlExample.CSharpSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CSharpSource", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_ControlExample_CSharpSource;
                xamlMember.Setter = set_54_ControlExample_CSharpSource;
                break;
            case "App1.ControlExample.Substitutions":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Substitutions", "System.Collections.Generic.IList`1<App1.ControlExampleSubstitution>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_ControlExample_Substitutions;
                xamlMember.Setter = set_55_ControlExample_Substitutions;
                break;
            case "App1.ControlExample.ExampleHeight":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ExampleHeight", "Microsoft.UI.Xaml.GridLength");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_ControlExample_ExampleHeight;
                xamlMember.Setter = set_56_ControlExample_ExampleHeight;
                break;
            case "App1.ControlExample.WebViewHeight":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "WebViewHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_ControlExample_WebViewHeight;
                xamlMember.Setter = set_57_ControlExample_WebViewHeight;
                break;
            case "App1.ControlExample.WebViewWidth":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "WebViewWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ControlExample_WebViewWidth;
                xamlMember.Setter = set_58_ControlExample_WebViewWidth;
                break;
            case "App1.ControlExample.HorizontalContentAlignment":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HorizontalContentAlignment", "Microsoft.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_ControlExample_HorizontalContentAlignment;
                xamlMember.Setter = set_59_ControlExample_HorizontalContentAlignment;
                break;
            case "App1.ControlExample.MinimumUniversalAPIContract":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ControlExample");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MinimumUniversalAPIContract", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_ControlExample_MinimumUniversalAPIContract;
                xamlMember.Setter = set_60_ControlExample_MinimumUniversalAPIContract;
                break;
            case "Microsoft.UI.Xaml.Controls.AnimatedIcon.Source":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.AnimatedIcon");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Source", "Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_AnimatedIcon_Source;
                xamlMember.Setter = set_61_AnimatedIcon_Source;
                break;
            case "Microsoft.UI.Xaml.Controls.AnimatedIcon.FallbackIconSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.AnimatedIcon");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FallbackIconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_AnimatedIcon_FallbackIconSource;
                xamlMember.Setter = set_62_AnimatedIcon_FallbackIconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.AnimatedIcon.MirroredWhenRightToLeft":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.AnimatedIcon");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MirroredWhenRightToLeft", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_AnimatedIcon_MirroredWhenRightToLeft;
                xamlMember.Setter = set_63_AnimatedIcon_MirroredWhenRightToLeft;
                break;
            case "Microsoft.UI.Xaml.Controls.AnimatedIcon.State":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.AnimatedIcon");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "State", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_64_AnimatedIcon_State;
                xamlMember.Setter = set_64_AnimatedIcon_State;
                break;
            case "App1.Controls.HeaderTile.Title":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.HeaderTile");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_HeaderTile_Title;
                xamlMember.Setter = set_65_HeaderTile_Title;
                break;
            case "App1.Controls.HeaderTile.Description":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.HeaderTile");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_HeaderTile_Description;
                xamlMember.Setter = set_66_HeaderTile_Description;
                break;
            case "App1.Controls.HeaderTile.Source":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.HeaderTile");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Source", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_HeaderTile_Source;
                xamlMember.Setter = set_67_HeaderTile_Source;
                break;
            case "App1.Controls.HeaderTile.Link":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.HeaderTile");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Link", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_HeaderTile_Link;
                xamlMember.Setter = set_68_HeaderTile_Link;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.NormalizedCenterPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NormalizedCenterPoint", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_69_VisualExtensions_NormalizedCenterPoint;
                xamlMember.Setter = set_69_VisualExtensions_NormalizedCenterPoint;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.AnchorPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AnchorPoint", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_70_VisualExtensions_AnchorPoint;
                xamlMember.Setter = set_70_VisualExtensions_AnchorPoint;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.CenterPoint":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CenterPoint", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_71_VisualExtensions_CenterPoint;
                xamlMember.Setter = set_71_VisualExtensions_CenterPoint;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.Offset":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Offset", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_72_VisualExtensions_Offset;
                xamlMember.Setter = set_72_VisualExtensions_Offset;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.Translation":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Translation", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_73_VisualExtensions_Translation;
                xamlMember.Setter = set_73_VisualExtensions_Translation;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.Opacity":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_74_VisualExtensions_Opacity;
                xamlMember.Setter = set_74_VisualExtensions_Opacity;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.RotationAngle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RotationAngle", "Double");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_75_VisualExtensions_RotationAngle;
                xamlMember.Setter = set_75_VisualExtensions_RotationAngle;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.RotationAngleInDegrees":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RotationAngleInDegrees", "Double");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_76_VisualExtensions_RotationAngleInDegrees;
                xamlMember.Setter = set_76_VisualExtensions_RotationAngleInDegrees;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.RotationAxis":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RotationAxis", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_77_VisualExtensions_RotationAxis;
                xamlMember.Setter = set_77_VisualExtensions_RotationAxis;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.Scale":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Scale", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_78_VisualExtensions_Scale;
                xamlMember.Setter = set_78_VisualExtensions_Scale;
                break;
            case "CommunityToolkit.WinUI.VisualExtensions.Size":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.VisualExtensions");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Size", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_79_VisualExtensions_Size;
                xamlMember.Setter = set_79_VisualExtensions_Size;
                break;
            case "CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter.EmptyValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "EmptyValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_EmptyObjectToObjectConverter_EmptyValue;
                xamlMember.Setter = set_80_EmptyObjectToObjectConverter_EmptyValue;
                break;
            case "CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter.NotEmptyValue":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Converters.EmptyObjectToObjectConverter");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NotEmptyValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_EmptyObjectToObjectConverter_NotEmptyValue;
                xamlMember.Setter = set_81_EmptyObjectToObjectConverter_NotEmptyValue;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Title":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_TeachingTip_Title;
                xamlMember.Setter = set_82_TeachingTip_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonContent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ActionButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_TeachingTip_ActionButtonContent;
                xamlMember.Setter = set_83_TeachingTip_ActionButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonContent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CloseButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_TeachingTip_CloseButtonContent;
                xamlMember.Setter = set_84_TeachingTip_CloseButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PreferredPlacement":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PreferredPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_TeachingTip_PreferredPlacement;
                xamlMember.Setter = set_85_TeachingTip_PreferredPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Subtitle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_TeachingTip_Subtitle;
                xamlMember.Setter = set_86_TeachingTip_Subtitle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Target":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Target", "Microsoft.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_TeachingTip_Target;
                xamlMember.Setter = set_87_TeachingTip_Target;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeroContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_TeachingTip_HeroContent;
                xamlMember.Setter = set_88_TeachingTip_HeroContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommand":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ActionButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_TeachingTip_ActionButtonCommand;
                xamlMember.Setter = set_89_TeachingTip_ActionButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommandParameter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ActionButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_TeachingTip_ActionButtonCommandParameter;
                xamlMember.Setter = set_90_TeachingTip_ActionButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonStyle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ActionButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_TeachingTip_ActionButtonStyle;
                xamlMember.Setter = set_91_TeachingTip_ActionButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommand":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_TeachingTip_CloseButtonCommand;
                xamlMember.Setter = set_92_TeachingTip_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommandParameter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_TeachingTip_CloseButtonCommandParameter;
                xamlMember.Setter = set_93_TeachingTip_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonStyle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_TeachingTip_CloseButtonStyle;
                xamlMember.Setter = set_94_TeachingTip_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContentPlacement":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeroContentPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_TeachingTip_HeroContentPlacement;
                xamlMember.Setter = set_95_TeachingTip_HeroContentPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IconSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_TeachingTip_IconSource;
                xamlMember.Setter = set_96_TeachingTip_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsLightDismissEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_TeachingTip_IsLightDismissEnabled;
                xamlMember.Setter = set_97_TeachingTip_IsLightDismissEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsOpen":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_TeachingTip_IsOpen;
                xamlMember.Setter = set_98_TeachingTip_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PlacementMargin":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PlacementMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_TeachingTip_PlacementMargin;
                xamlMember.Setter = set_99_TeachingTip_PlacementMargin;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ShouldConstrainToRootBounds":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShouldConstrainToRootBounds", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_TeachingTip_ShouldConstrainToRootBounds;
                xamlMember.Setter = set_100_TeachingTip_ShouldConstrainToRootBounds;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TailVisibility":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TailVisibility", "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_TeachingTip_TailVisibility;
                xamlMember.Setter = set_101_TeachingTip_TailVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TemplateSettings":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_TeachingTip_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "App1.Controls.PageHeader.ThemeButtonVisibility":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.PageHeader");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ThemeButtonVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_PageHeader_ThemeButtonVisibility;
                xamlMember.Setter = set_103_PageHeader_ThemeButtonVisibility;
                break;
            case "App1.Controls.PageHeader.PageName":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.PageHeader");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PageName", "String");
                xamlMember.Getter = get_104_PageHeader_PageName;
                xamlMember.Setter = set_104_PageHeader_PageName;
                break;
            case "App1.Controls.PageHeader.CopyLinkAction":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.PageHeader");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CopyLinkAction", "System.Action");
                xamlMember.Getter = get_105_PageHeader_CopyLinkAction;
                xamlMember.Setter = set_105_PageHeader_CopyLinkAction;
                break;
            case "App1.Controls.PageHeader.ToggleThemeAction":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.PageHeader");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ToggleThemeAction", "System.Action");
                xamlMember.Getter = get_106_PageHeader_ToggleThemeAction;
                xamlMember.Setter = set_106_PageHeader_ToggleThemeAction;
                break;
            case "App1.Controls.PageHeader.Item":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Controls.PageHeader");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Item", "App1.Data.ControlInfoDataItem");
                xamlMember.Getter = get_107_PageHeader_Item;
                xamlMember.Setter = set_107_PageHeader_Item;
                break;
            case "App1.HomePage.WinAppSdkDetails":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.HomePage");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "WinAppSdkDetails", "String");
                xamlMember.Getter = get_108_HomePage_WinAppSdkDetails;
                xamlMember.SetIsReadOnly();
                break;
            case "App1.ItemPage.Item":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.ItemPage");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Item", "App1.Data.ControlInfoDataItem");
                xamlMember.Getter = get_109_ItemPage_Item;
                xamlMember.Setter = set_109_ItemPage_Item;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.IconSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_InfoBadge_IconSource;
                xamlMember.Setter = set_110_InfoBadge_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.TemplateSettings":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_InfoBadge_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.Value":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_InfoBadge_Value;
                xamlMember.Setter = set_112_InfoBadge_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_113_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_114_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_116_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_117_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_118_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_NavigationView_ContentOverlay;
                xamlMember.Setter = set_119_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_121_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_123_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_NavigationView_Header;
                xamlMember.Setter = set_124_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_125_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_126_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_127_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_128_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_129_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_130_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_131_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_132_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_133_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_134_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_135_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_136_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_137_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_138_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_139_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_140_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_NavigationView_PaneFooter;
                xamlMember.Setter = set_141_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_NavigationView_PaneHeader;
                xamlMember.Setter = set_142_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_NavigationView_PaneTitle;
                xamlMember.Setter = set_143_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_144_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_NavigationView_SelectedItem;
                xamlMember.Setter = set_145_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_146_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_148_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopLeft":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TopLeft", "Double");
                xamlMember.Getter = get_150_CornerRadius_TopLeft;
                xamlMember.Setter = set_150_CornerRadius_TopLeft;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopRight":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "TopRight", "Double");
                xamlMember.Getter = get_151_CornerRadius_TopRight;
                xamlMember.Setter = set_151_CornerRadius_TopRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomRight":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BottomRight", "Double");
                xamlMember.Getter = get_152_CornerRadius_BottomRight;
                xamlMember.Setter = set_152_CornerRadius_BottomRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomLeft":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "BottomLeft", "Double");
                xamlMember.Getter = get_153_CornerRadius_BottomLeft;
                xamlMember.Setter = set_153_CornerRadius_BottomLeft;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_NavigationViewItem_Icon;
                xamlMember.Setter = set_154_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_157_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.InfoBadge":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "InfoBadge", "Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_NavigationViewItem_InfoBadge;
                xamlMember.Setter = set_158_NavigationViewItem_InfoBadge;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_159_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_160_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_160_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_161_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_162_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_163_NavigationViewItemBase_IsSelected;
                break;
            case "App1.MainTest.DeviceFamily":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MainTest");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DeviceFamily", "App1.MainTest.DeviceType");
                xamlMember.Getter = get_164_MainTest_DeviceFamily;
                xamlMember.Setter = set_164_MainTest_DeviceFamily;
                break;
            case "App1.MainTest.NavigationViewLoaded":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MainTest");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NavigationViewLoaded", "System.Action");
                xamlMember.Getter = get_165_MainTest_NavigationViewLoaded;
                xamlMember.Setter = set_165_MainTest_NavigationViewLoaded;
                break;
            case "App1.MainTest.NavigationView":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MainTest");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NavigationView", "Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember.Getter = get_166_MainTest_NavigationView;
                xamlMember.SetIsReadOnly();
                break;
            case "App1.MainTest.AppTitleText":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MainTest");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AppTitleText", "String");
                xamlMember.Getter = get_167_MainTest_AppTitleText;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.Description":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_SettingsCard_Description;
                xamlMember.Setter = set_168_SettingsCard_Description;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.Header":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_SettingsCard_Header;
                xamlMember.Setter = set_169_SettingsCard_Header;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.HeaderIcon":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeaderIcon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_SettingsCard_HeaderIcon;
                xamlMember.Setter = set_170_SettingsCard_HeaderIcon;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.IsClickEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsClickEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_SettingsCard_IsClickEnabled;
                xamlMember.Setter = set_171_SettingsCard_IsClickEnabled;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.ActionIcon":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ActionIcon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_SettingsCard_ActionIcon;
                xamlMember.Setter = set_172_SettingsCard_ActionIcon;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.ContentAlignment":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ContentAlignment", "CommunityToolkit.WinUI.Controls.ContentAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_SettingsCard_ContentAlignment;
                xamlMember.Setter = set_173_SettingsCard_ContentAlignment;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.ActionIconToolTip":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ActionIconToolTip", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_SettingsCard_ActionIconToolTip;
                xamlMember.Setter = set_174_SettingsCard_ActionIconToolTip;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.IsActionIconVisible":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsActionIconVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_SettingsCard_IsActionIconVisible;
                xamlMember.Setter = set_175_SettingsCard_IsActionIconVisible;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Content":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_SettingsExpander_Content;
                xamlMember.Setter = set_176_SettingsExpander_Content;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Description":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_SettingsExpander_Description;
                xamlMember.Setter = set_177_SettingsExpander_Description;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Header":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_SettingsExpander_Header;
                xamlMember.Setter = set_178_SettingsExpander_Header;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.HeaderIcon":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HeaderIcon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_SettingsExpander_HeaderIcon;
                xamlMember.Setter = set_179_SettingsExpander_HeaderIcon;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Items":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_SettingsExpander_Items;
                xamlMember.Setter = set_180_SettingsExpander_Items;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemsSource":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_SettingsExpander_ItemsSource;
                xamlMember.Setter = set_181_SettingsExpander_ItemsSource;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemTemplate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_SettingsExpander_ItemTemplate;
                xamlMember.Setter = set_182_SettingsExpander_ItemTemplate;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemContainerStyleSelector":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_SettingsExpander_ItemContainerStyleSelector;
                xamlMember.Setter = set_183_SettingsExpander_ItemContainerStyleSelector;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemsHeader":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_SettingsExpander_ItemsHeader;
                xamlMember.Setter = set_184_SettingsExpander_ItemsHeader;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemsFooter":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_SettingsExpander_ItemsFooter;
                xamlMember.Setter = set_185_SettingsExpander_ItemsFooter;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.IsExpanded":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_SettingsExpander_IsExpanded;
                xamlMember.Setter = set_186_SettingsExpander_IsExpanded;
                break;
            case "App1.SettingsPage.Version":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.SettingsPage");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Version", "String");
                xamlMember.Getter = get_187_SettingsPage_Version;
                xamlMember.SetIsReadOnly();
                break;
            case "App1.SettingsPage.WinAppSdkRuntimeDetails":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.SettingsPage");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "WinAppSdkRuntimeDetails", "String");
                xamlMember.Getter = get_188_SettingsPage_WinAppSdkRuntimeDetails;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_189_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_TreeViewNode_Content;
                xamlMember.Setter = set_190_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_193_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_193_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_194_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_195_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App1.App1_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

